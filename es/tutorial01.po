# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2012-03-26 23:29-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Javier Rojas <jerojasro@devnull.li>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: orig/tutorial01.txt:1
#, no-wrap
msgid "=====================================\n"
msgstr "==============================================\n"

#. type: Plain text
#: orig/tutorial01.txt:3
#, no-wrap
msgid ""
"Writing your first Django app, part 1\n"
"=====================================\n"
msgstr ""
"Escribir su primera aplicación Django, parte 1\n"
"==============================================\n"

#. type: Plain text
#: orig/tutorial01.txt:6
msgid "Let's learn by example."
msgstr "Vamos a aprender con un ejemplo."

#. type: Plain text
#: orig/tutorial01.txt:9
msgid ""
"Throughout this tutorial, we'll walk you through the creation of a basic "
"poll application."
msgstr ""
"A lo largo de este tutorial, le guiaremos en la creación de una aplicación "
"básica para encuestas (polls)."

#. type: Plain text
#: orig/tutorial01.txt:11
msgid "It'll consist of two parts:"
msgstr "Consistirá de dos partes:"

#. type: Bullet: '* '
#: orig/tutorial01.txt:14
msgid "A public site that lets people view polls and vote in them."
msgstr ""
"Un sitio público que permite a sus visitantes ver encuestas y votar en ellas."

#. type: Bullet: '* '
#: orig/tutorial01.txt:14
msgid "An admin site that lets you add, change and delete polls."
msgstr ""
"Y un sitio administrativo que le permite añadir, modificar y borrar "
"encuestas."

#. type: Plain text
#: orig/tutorial01.txt:19
msgid ""
"We'll assume you have :doc:`Django installed </intro/install>` already. You "
"can tell Django is installed by running the Python interactive interpreter "
"and typing ``import django``. If that command runs successfully, with no "
"errors, Django is installed."
msgstr ""
"Asumiremos que ya ha :doc:`instalado Django</intro/install>`. Puede "
"confirmar que Django está instalado ejecutando el intérprete interactivo de "
"Python y ejecutando la orden ``import django``. Si dicha orden se ejecuta "
"exitosamente, sin errores, Django está instalado."

#. type: Plain text
#: orig/tutorial01.txt:21
msgid ".. admonition:: Where to get help:"
msgstr ".. admonition:: Dónde conseguir ayuda:"

# TODO ver cómo mencionar #django-es
#. type: Plain text
#: orig/tutorial01.txt:25
#, no-wrap
msgid ""
"    If you're having trouble going through this tutorial, please post a message\n"
"    to `django-users`__ or drop by `#django on irc.freenode.net`__ to chat\n"
"    with other Django users who might be able to help.\n"
msgstr ""
"    Si encuentra problemas al seguir este tutorial, por favor envíe un mensaje a\n"
"    `django-users`__ o ingrese al canal `#django en irc.freenode.net`__ para\n"
"    hablar con otros usuarios de Django que podrían ayudarlo.\n"

#. type: Plain text
#: orig/tutorial01.txt:28
msgid ""
"__ http://groups.google.com/group/django-users __ irc://irc.freenode.net/"
"django"
msgstr ""
"__ http://groups.google.com/group/django-users __ irc://irc.freenode.net/"
"django"

#. type: Plain text
#: orig/tutorial01.txt:30
#, no-wrap
msgid ""
"Creating a project\n"
"==================\n"
msgstr ""
"Crear un proyecto\n"
"=================\n"

#. type: Plain text
#: orig/tutorial01.txt:37
msgid ""
"If this is your first time using Django, you'll have to take care of some "
"initial setup. Namely, you'll need to auto-generate some code that "
"establishes a Django :term:`project` -- a collection of settings for an "
"instance of Django, including database configuration, Django-specific "
"options and application-specific settings."
msgstr ""
"Si esta es la primera vez que usa Django, tendrá que encargarse de su "
"configuración inicial. En particular, tendrá que auto-generar el código con "
"el que puede iniciar un :term:`proyecto` Django -- un conjunto de "
"configuraciones para una instancia de Django, que incluye configuración de "
"base de datos, opciones específicas de Django, y opciones específicas de la "
"aplicación."

#. type: Plain text
#: orig/tutorial01.txt:40
msgid ""
"From the command line, ``cd`` into a directory where you'd like to store "
"your code, then run the following command:"
msgstr ""
"Desde el intérprete de órdenes, ingrese (``cd``) al directorio en que desea "
"ubicar su código, y luego ejecute la siguiente orden:"

#. type: Plain text
#: orig/tutorial01.txt:42 orig/tutorial01.txt:269 orig/tutorial01.txt:320
#: orig/tutorial01.txt:433 orig/tutorial01.txt:510 orig/tutorial01.txt:530
msgid ".. code-block:: bash"
msgstr ".. code-block:: bash"

#. type: Plain text
#: orig/tutorial01.txt:44
#, no-wrap
msgid "   django-admin.py startproject mysite\n"
msgstr "   django-admin.py startproject mysite\n"

#. type: Plain text
#: orig/tutorial01.txt:46
msgid "This will create a ``mysite`` directory in your current directory."
msgstr ""
"Esta orden creará un directorio llamado ``mysite`` dentro del directorio "
"actual."

#. type: Plain text
#: orig/tutorial01.txt:48
msgid ".. admonition:: Script name may differ in distribution packages"
msgstr ""
".. admonition:: El nombre del script puede diferir dependiendo de cómo se "
"haya instalado Django"

#. type: Plain text
#: orig/tutorial01.txt:53
#, no-wrap
msgid ""
"   If you installed Django using a Linux distribution's package manager\n"
"   (e.g. apt-get or yum) ``django-admin.py`` may have been renamed to\n"
"   ``django-admin``. You may continue through this documentation by omitting\n"
"   ``.py`` from each command.\n"
msgstr ""
"   Si instaló Django usando el administrador de paquetes de una distribución de\n"
"   Linux (p.ej., apt-get o yum) ``django-admin.py`` puede haber sido renombrado\n"
"   como ``django-admin``. En dicho caso, puede continuar usando esta\n"
"   documentación, teniendo el cuidado de no escribir el ``.py`` en cada orden.\n"

#. type: Plain text
#: orig/tutorial01.txt:55
msgid ".. admonition:: Mac OS X permissions"
msgstr ".. admonition:: Permisos en Mac OS X"

#. type: Plain text
#: orig/tutorial01.txt:63
#, fuzzy, no-wrap
#| msgid ""
#| "   If you're using Mac OS X, you may see the message \"permission denied\" when\n"
#| "   you try to run ``django-admin.py startproject``. This is because, on\n"
#| "   Unix-based systems like OS X, a file must be marked as \"executable\" before it\n"
#| "   can be run as a program. To do this, open Terminal.app and navigate (using\n"
#| "   the ``cd`` command) to the directory where :doc:`django-admin.py\n"
#| "   </ref/django-admin>` is installed, then run the command\n"
#| "   ``chmod +x django-admin.py``.\n"
msgid ""
"   If you're using Mac OS X, you may see the message \"permission denied\" when\n"
"   you try to run ``django-admin.py startproject``. This is because, on\n"
"   Unix-based systems like OS X, a file must be marked as \"executable\" before it\n"
"   can be run as a program. To do this, open Terminal.app and navigate (using\n"
"   the ``cd`` command) to the directory where :doc:`django-admin.py\n"
"   </ref/django-admin>` is installed, then run the command\n"
"   ``sudo chmod +x django-admin.py``.\n"
msgstr ""
"   Si está usando Mac OS X, puede que se encuentre con el mensaje «permission\n"
"   denied» al tratar de ejecutar ``django-admin.py startproject``. En sistemas\n"
"   basados en Unix como Mac OS X, un fichero debe ser marcado como «ejecutable»\n"
"   antes de poder ejecutarse como un programa. Para hacerlo, abra Terminal.app,\n"
"   ubíquese (usando la orden ``cd``) en el directorio en donde está instalado el\n"
"   script :doc:`django-admin.py </ref/django-admin>`, y ejecute la orden ``chmod\n"
"   +x django-admin.py``.\n"

# TODO revisar si esto se puede traducir o no
#. type: Plain text
#: orig/tutorial01.txt:65 orig/tutorial01.txt:229
msgid ".. note::"
msgstr ".. note::"

#. type: Plain text
#: orig/tutorial01.txt:70
#, no-wrap
msgid ""
"    You'll need to avoid naming projects after built-in Python or Django\n"
"    components. In particular, this means you should avoid using names like\n"
"    ``django`` (which will conflict with Django itself) or ``test`` (which\n"
"    conflicts with a built-in Python package).\n"
msgstr ""
"   Debe evitar usar nombres de componentes integrados de Python o Django en sus\n"
"   proyectos. En particular, debe abstenerse de usar nombres como ``django`` (lo\n"
"   que crearía un conflicto con Django) o ``test`` (que entra en conflicto con\n"
"   un paquete integrado de Python).\n"

#. type: Plain text
#: orig/tutorial01.txt:77
#, fuzzy
#| msgid ""
#| ":doc:`django-admin.py </ref/django-admin>` should be on your system path "
#| "if you installed Django via ``python setup.py``. If it's not on your "
#| "path, you can find it in ``site-packages/django/bin``, where ```site-"
#| "packages``` is a directory within your Python installation. Consider "
#| "symlinking to :doc:`django-admin.py </ref/django-admin>` from some place "
#| "on your path, such as :file:`/usr/local/bin`."
msgid ""
":doc:`django-admin.py </ref/django-admin>` should be on your system path if "
"you installed Django via ``python setup.py``. If it's not on your path, you "
"can find it in ``site-packages/django/bin``, where ``site-packages`` is a "
"directory within your Python installation. Consider symlinking to :doc:"
"`django-admin.py </ref/django-admin>` from some place on your path, such as :"
"file:`/usr/local/bin`."
msgstr ""
"Si instaló Django usando ``python setup.py``, :doc:`django-admin.py </ref/"
"django-admin>` debe estar en la ruta de su sistema (system path). Si no lo "
"está, puede encontrarlo en ``site-packages/django/bin``, en donde ```site-"
"packages``` es un directorio dentro de su instalación de Python. Se sugiere "
"crear un enlace simbólico a :doc:`django-admin.py </ref/django-admin>` desde "
"algún sitio que se encuentre en la ruta de su sistema, como por ejemplo :"
"file:`/usr/local/bin`."

# TODO ver si toca traducir "admonition" o no
#. type: Plain text
#: orig/tutorial01.txt:79
msgid ".. admonition:: Where should this code live?"
msgstr ".. admonition:: ¿Dónde debería ubicar el código?"

#. type: Plain text
#: orig/tutorial01.txt:86
#, no-wrap
msgid ""
"    If your background is in PHP, you're probably used to putting code under the\n"
"    Web server's document root (in a place such as ``/var/www``). With Django,\n"
"    you don't do that. It's not a good idea to put any of this Python code\n"
"    within your Web server's document root, because it risks the possibility\n"
"    that people may be able to view your code over the Web. That's not good for\n"
"    security.\n"
msgstr ""
"    Si tiene experiencia previa con PHP, seguramente estará acostumbrado a poner\n"
"    el código fuente en la carpeta raíz (document root) del servidor Web (en un\n"
"    lugar como ``/var/www``).  Con Django no se hace eso. No es recomendable\n"
"    poner el código Python dentro de la carpeta raíz del servidor, porque al\n"
"    hacerlo se expone a que alguien vea el código desde Internet. Es algo malo\n"
"    desde el punto de vista de seguridad.\n"

#. type: Plain text
#: orig/tutorial01.txt:89
#, no-wrap
msgid ""
"    Put your code in some directory **outside** of the document root, such as\n"
"    :file:`/home/mycode`.\n"
msgstr ""
"    Ubique el código **fuera** de la carpeta raíz del servidor, por ejemplo en\n"
"    :file:`/home/mycode`.\n"

#. type: Plain text
#: orig/tutorial01.txt:91
msgid "Let's look at what :djadmin:`startproject` created::"
msgstr "Demos una mirada a lo que creó :djadmin:`startproject`::"

#. type: Plain text
#: orig/tutorial01.txt:99
#, no-wrap
msgid ""
"    mysite/\n"
"        manage.py\n"
"        mysite/\n"
"            __init__.py\n"
"            settings.py\n"
"            urls.py\n"
"            wsgi.py\n"
msgstr ""
"    mysite/\n"
"        manage.py\n"
"        mysite/\n"
"            __init__.py\n"
"            settings.py\n"
"            urls.py\n"
"            wsgi.py\n"

#. type: Plain text
#: orig/tutorial01.txt:101
msgid ".. admonition:: Doesn't match what you see?"
msgstr ".. admonition:: ¿No corresponde con lo que ve?"

#. type: Plain text
#: orig/tutorial01.txt:106
#, no-wrap
msgid ""
"    The default project layout recently changed. If you're seeing a \"flat\"\n"
"    layout (with no inner :file:`mysite/` directory), you're probably using\n"
"    a version of Django that doesn't match this tutorial version.  You'll\n"
"    want to either switch to the older tutorial or the newer Django version.\n"
msgstr ""
"    La estructura estándar de los proyectos cambió recientemente. Si ud. ve una\n"
"    estructura «plana» (sin el directorio :file:`mysite/`), seguramente está\n"
"    usando una versión de Django que no corresponde con la versión que usa este\n"
"    tutorial.  Se sugiere que siga el tutorial de la versión correspondiente, o\n"
"    que use la versión de Django correspondiente.\n"

#. type: Plain text
#: orig/tutorial01.txt:108
msgid "These files are:"
msgstr "Estos archivos son:"

#. type: Bullet: '* '
#: orig/tutorial01.txt:112
msgid ""
"The outer :file:`mysite/` directory is just a container for your project. "
"Its name doesn't matter to Django; you can rename it to anything you like."
msgstr ""
"El directorio :file:`mysite/` es simplemente un contenedor para su proyecto.  El "
"nombre de dicho directorio no afecta a Django de ninguna manera; puede nombrarlo "
"como ud. desee."

#. type: Bullet: '* '
#: orig/tutorial01.txt:116
msgid ""
":file:`manage.py`: A command-line utility that lets you interact with this "
"Django project in various ways. You can read all the details about :file:"
"`manage.py` in :doc:`/ref/django-admin`."
msgstr ""
":file:`manage.py`: Una utilidad de línea de órdenes que le permite "
"interactuar de distintas formas con este proyecto Django.  Puede leer todos "
"los detalles del uso de :file: `manage.py` en :doc:`/ref/django-admin`."

#. type: Bullet: '* '
#: orig/tutorial01.txt:120
msgid ""
"The inner :file:`mysite/` directory is the actual Python package for your "
"project. Its name is the Python package name you'll need to use to import "
"anything inside it (e.g. ``import mysite.settings``)."
msgstr ""
"El directorio interno :file:`mysite/` es el paquete Python de su proyecto. Su "
"nombre es el nombre del paquete Python que tendrá que usar para importar "
"cualquier elemento del proyecto (por ejemplo,, ``import mysite.settings``)."

#. type: Bullet: '* '
#: orig/tutorial01.txt:124
msgid ""
":file:`mysite/__init__.py`: An empty file that tells Python that this "
"directory should be considered a Python package. (Read `more about "
"packages`_ in the official Python docs if you're a Python beginner.)"
msgstr ""
":file:`mysite/__init__.py`: un archivo vacío que le indica a Python que este "
"directorio debe ser considerado un paquete Python (Lea `Más acerca de "
"paquetes` en la documentación oficial de Python si usted es un principiante "
"con Python.)"

#. type: Bullet: '* '
#: orig/tutorial01.txt:128
msgid ""
":file:`mysite/settings.py`: Settings/configuration for this Django "
"project.  :doc:`/topics/settings` will tell you all about how settings work."
msgstr ""
":file:`mysite/settings.py`: configuración para este proyecto Django. En "
":doc:`/topics/settings` encontrará todo lo relacionado con la configuración "
"de Django."

#. type: Bullet: '* '
#: orig/tutorial01.txt:132
msgid ""
":file:`mysite/urls.py`: The URL declarations for this Django project; a "
"\"table of contents\" of your Django-powered site. You can read more about "
"URLs in :doc:`/topics/http/urls`."
msgstr ""
":file:`mysite/urls.py`: las declaraciones de URL para este proyecto Django; "
"son la «tabla de contenido» de su sitio Django.  Más información acerca de "
"URLs en :doc:`/topics/http/urls`."

#. type: Bullet: '* '
#: orig/tutorial01.txt:135
msgid ""
":file:`mysite/wsgi.py`: An entry-point for WSGI-compatible webservers to "
"serve your project. See :doc:`/howto/deployment/wsgi/index` for more details."
msgstr ""
":file:`mysite/wsgi.py`: un punto de entrada para desplegar su proyecto con "
"servidores web compatibles con WSGI.  Consulte "
":doc:`/howto/deployment/wsgi/index` para más detalles."

# TODO ver si hay que traducir
#. type: Plain text
#: orig/tutorial01.txt:137
msgid ""
".. _more about packages: http://docs.python.org/tutorial/modules."
"html#packages"
msgstr ""
".. _more about packages: http://docs.python.org/tutorial/modules."
"html#packages"

#. type: Plain text
#: orig/tutorial01.txt:139
#, no-wrap
msgid ""
"The development server\n"
"----------------------\n"
msgstr ""
"El servidor de desarrollo\n"
"-------------------------\n"

#. type: Plain text
#: orig/tutorial01.txt:144
msgid ""
"Let's verify this worked. Change into the outer :file:`mysite` directory, if "
"you haven't already, and run the command ``python manage.py runserver``. "
"You'll see the following output on the command line::"
msgstr ""
"Verifiquemos que esto funcionó apropiadamente. Entre al directorio "
":file:`mysite`, si no lo ha hecho ya, y ejecute la orden ``python manage.py "
"runserver``.  Verá lo siguiente en la línea de órdenes::"

#. type: Plain text
#: orig/tutorial01.txt:147
#, no-wrap
msgid ""
"    Validating models...\n"
"    0 errors found.\n"
msgstr ""
"    Validating models...\n"
"    0 errors found.\n"

#. type: Plain text
#: orig/tutorial01.txt:151
#, no-wrap
msgid ""
"    Django version 1.4, using settings 'mysite.settings'\n"
"    Development server is running at http://127.0.0.1:8000/\n"
"    Quit the server with CONTROL-C.\n"
msgstr ""
"    Django version 1.4, using settings 'mysite.settings'\n"
"    Development server is running at http://127.0.0.1:8000/\n"
"    Quit the server with CONTROL-C.\n"

#. type: Plain text
#: orig/tutorial01.txt:156
msgid ""
"You've started the Django development server, a lightweight Web server "
"written purely in Python. We've included this with Django so you can develop "
"things rapidly, without having to deal with configuring a production server "
"-- such as Apache -- until you're ready for production."
msgstr ""
"Ha iniciado el servidor de desarrollo de Django, un servidor web ligero "
"escrito completamente en Python. Lo hemos incluido en Django para que pueda "
"desarrollar rápidamente, sin tener que configurar un servidor de producción "
"-- como Apache -- hasta que esté listo para entrar a producción."

#. type: Plain text
#: orig/tutorial01.txt:160
msgid ""
"Now's a good time to note: DON'T use this server in anything resembling a "
"production environment. It's intended only for use while developing. (We're "
"in the business of making Web frameworks, not Web servers.)"
msgstr ""
"Es un buen momento para indicar: NO use este servidor en nada que se parezca "
"a un ambiente de producción. Está pensado para usarse únicamente durante el "
"desarrollo. (Estamos en el negocio de hacer frameworks Web, no servidores "
"Web.)"

#. type: Plain text
#: orig/tutorial01.txt:164
msgid ""
"Now that the server's running, visit http://127.0.0.1:8000/ with your Web "
"browser. You'll see a \"Welcome to Django\" page, in pleasant, light-blue "
"pastel.  It worked!"
msgstr ""
"Ahora que el servidor está ejecutándose, visite http://127.0.0.1:8000/ con su "
"navegador web.  Verá una página con el mensaje «Welcome to Django» "
"(Bienvenido a Django) en un agradable color azul pastel. ¡Funcionó!"

#. type: Plain text
#: orig/tutorial01.txt:166
msgid ".. admonition:: Changing the port"
msgstr ".. admonition:: Cambiar el puerto"

#. type: Plain text
#: orig/tutorial01.txt:169
#, no-wrap
msgid ""
"    By default, the :djadmin:`runserver` command starts the development server\n"
"    on the internal IP at port 8000.\n"
msgstr ""
"    La orden :djadmin:`runserver` inicia el servidor de desarrollo asociándolo a\n"
"    la IP interna y al puerto 8000.\n"

#. type: Plain text
#: orig/tutorial01.txt:173
#, no-wrap
msgid ""
"    If you want to change the server's port, pass\n"
"    it as a command-line argument. For instance, this command starts the server\n"
"    on port 8080:\n"
msgstr ""
"    Si quiere cambiar el puerto en que escucha el servidor, páselo como\n"
"    argumento a la orden. Por ejemplo, esta orden inicia el servidor en el\n"
"    puerto 8080:\n"

#. type: Plain text
#: orig/tutorial01.txt:175 orig/tutorial01.txt:183
#, no-wrap
msgid "    .. code-block:: bash\n"
msgstr "    .. code-block:: bash\n"

#. type: Plain text
#: orig/tutorial01.txt:177
#, no-wrap
msgid "        python manage.py runserver 8080\n"
msgstr "        python manage.py runserver 8080\n"

#. type: Plain text
#: orig/tutorial01.txt:181
#, no-wrap
msgid ""
"    If you want to change the server's IP, pass it along with the port. So to\n"
"    listen on all public IPs (useful if you want to show off your work on other\n"
"    computers), use:\n"
msgstr ""
"    Si desea cambiar la IP en la cual escucha el servidor, pásela junto con el\n"
"    puerto. Por ejemplo, para escuchar en todas las IPs públicas (útil si quiere\n"
"    hacer una demostración de su trabajo en otros computadores), use:\n"

#. type: Plain text
#: orig/tutorial01.txt:185
#, no-wrap
msgid "        python manage.py runserver 0.0.0.0:8000\n"
msgstr "        python manage.py runserver 0.0.0.0:8000\n"

#. type: Plain text
#: orig/tutorial01.txt:188
#, no-wrap
msgid ""
"    Full docs for the development server can be found in the\n"
"    :djadmin:`runserver` reference.\n"
msgstr ""
"    Puede encontrar la documentación completa del servidor de desarrollo en la\n"
"    referencia de :djadmin:`runserver`.\n"

#. type: Plain text
#: orig/tutorial01.txt:190
#, no-wrap
msgid ""
"Database setup\n"
"--------------\n"
msgstr ""
"Configuración de base de datos\n"
"------------------------------\n"

#. type: Plain text
#: orig/tutorial01.txt:196
msgid ""
"Now, edit :file:`mysite/settings.py`. It's a normal Python module with "
"module-level variables representing Django settings. Change the following "
"keys in the :setting:`DATABASES` ``'default'`` item to match your database "
"connection settings."
msgstr ""
"Ahora, edite :file:`mysite/settings.py`. Es un módulo Python normal con "
"variables de módulo representando las distintas opciones de Django. Cambie "
"las siguientes entradas en :setting:`DATABASES` ``'default'`` por las "
"necesarias para configurar la conexión a su base de datos."

#. type: Bullet: '* '
#: orig/tutorial01.txt:202
msgid ""
":setting:`ENGINE <DATABASE-ENGINE>` -- Either ``'django.db.backends."
"postgresql_psycopg2'``, ``'django.db.backends.mysql'``, ``'django.db."
"backends.sqlite3'`` or ``'django.db.backends.oracle'``. Other backends are :"
"setting:`also available <DATABASE-ENGINE>`."
msgstr ""
":setting:`ENGINE <MOTOR-BD>` -- Una de "
"``'django.db.backends.postgresql_psycopg2'``, ``'django.db.backends.mysql'``, "
"``'django.db.backends.sqlite3'`` o ``'django.db.backends.oracle'``. También "
"hay conectores para :setting:`otros motores <DATABASE-ENGINE>`."

#. type: Bullet: '* '
#: orig/tutorial01.txt:209
msgid ""
":setting:`NAME` -- The name of your database. If you're using SQLite, the "
"database will be a file on your computer; in that case, :setting:`NAME` "
"should be the full absolute path, including filename, of that file. If the "
"file doesn't exist, it will automatically be created when you synchronize "
"the database for the first time (see below)."
msgstr ""
":setting:`NAME` -- El nombre de su base de datos. Si está usando SQLite, la "
"base de datos será un fichero en su computador; en ese caso, :setting:`NAME` "
"debe ser la ruta absoluta a dicho fichero, incluyendo el nombre del mismo. Si "
"el fichero no existe, se creará automáticamente cuando sincronize la base de "
"datos por primera vez (ver más adelante)."

#. type: Plain text
#: orig/tutorial01.txt:212
#, no-wrap
msgid ""
"  When specifying the path, always use forward slashes, even on\n"
"  Windows (e.g. ``C:/homes/user/mysite/sqlite3.db``).\n"
msgstr ""
"  Al indicar la ruta, use siempre barras, incluso en Windows (por ejemplo,\n"
"  ``C:/homes/user/mysite/sqlite3.db``).\n"

#. type: Bullet: '* '
#: orig/tutorial01.txt:214
msgid ":setting:`USER` -- Your database username (not used for SQLite)."
msgstr ""
":setting:`USER` -- El nombre de usuario para su base de datos (no es necesario "
"para SQLite)."

#. type: Bullet: '* '
#: orig/tutorial01.txt:217
msgid ":setting:`PASSWORD` -- Your database password (not used for SQLite)."
msgstr ""
":setting:`PASSWORD` -- La contraseña para su base de datos (no se requiere "
"para SQLite)."

#. type: Bullet: '* '
#: orig/tutorial01.txt:221
msgid ""
":setting:`HOST` -- The host your database is on. Leave this as an empty "
"string if your database server is on the same physical machine (not used for "
"SQLite)."
msgstr ""
":setting:`HOST` -- La dirección del computador en que se encuentra su base de "
"datos. Deje este campo vacío si su servidor de bases de datos está en el "
"mismo computador que su instalación de Django (no se requiere para SQLite)."

#. type: Plain text
#: orig/tutorial01.txt:227
msgid ""
"If you're new to databases, we recommend simply using SQLite by setting :"
"setting:`ENGINE` to ``'django.db.backends.sqlite3'`` and :setting:`NAME` to "
"the place where you'd like to store the database. SQLite is included as part "
"of Python 2.5 and later, so you won't need to install anything else to "
"support your database."
msgstr ""
"Si las bases de datos son algo nuevo para usted, le recomendamos usar SQLite, "
"definiendo la opción :setting:`ENGINE` con el valor "
"``'django.db.backends.sqlite3'`` y definiendo :setting:`NAME` con el lugar en "
"el que desea ubicar el fichero de la base de datos. SQLite forma parte de la "
"instalación de Python 2.5 y posteriores, así que no debe preocuparse de "
"instalar nada adicional para poder usar esta base de datos."

#. type: Plain text
#: orig/tutorial01.txt:233
#, no-wrap
msgid ""
"    If you're using PostgreSQL or MySQL, make sure you've created a database by\n"
"    this point. Do that with \"``CREATE DATABASE database_name;``\" within your\n"
"    database's interactive prompt.\n"
msgstr ""
"    Si usa PostgreSQL o MySQL, asegúrese de haber creado una base de datos en\n"
"    este punto. Hágalo con la orden \"``CREATE DATABASE database_name;``\" desde\n"
"    el intérprete de órdenes de su base de datos.\n"

#. type: Plain text
#: orig/tutorial01.txt:236
#, no-wrap
msgid ""
"    If you're using SQLite, you don't need to create anything beforehand - the\n"
"    database file will be created automatically when it is needed.\n"
msgstr ""
"    Si usa SQLite no tiene que crear nada de antemano - el fichero de la base de\n"
"    datos se creará automáticamente cuando sea necesario.\n"

#. type: Plain text
#: orig/tutorial01.txt:239
msgid ""
"While you're editing :file:`settings.py`, set :setting:`TIME_ZONE` to your "
"time zone. The default value is the Central time zone in the U.S. (Chicago)."
msgstr ""
"Cuando edite :file:`settings.py`, defina :setting:`TIME_ZONE` con su zona "
"horaria. El valor predeterminado es la zona horaria Central de los Estados "
"Unidos (Chicago)."

#. type: Plain text
#: orig/tutorial01.txt:244
msgid ""
"Also, note the :setting:`INSTALLED_APPS` setting toward the bottom of the "
"file. That holds the names of all Django applications that are activated in "
"this Django instance. Apps can be used in multiple projects, and you can "
"package and distribute them for use by others in their projects."
msgstr ""
"Preste atención a la opción :setting:`INSTALLED_APPS` que está cerca del "
"final del fichero. Dicha opción lista los nombres de todas las aplicaciones "
"Django que están activas en esta instancia de Django. Las aplicaciones pueden "
"usarse en múltiples proyectos, y usted puede empaquetarlas y distribuirlas "
"para que otros puedan usarlas en sus proyectos."

#. type: Plain text
#: orig/tutorial01.txt:247
msgid ""
"By default, :setting:`INSTALLED_APPS` contains the following apps, all of "
"which come with Django:"
msgstr ""
"Por omisión, :setting:`INSTALLED_APPS` contiene las siguientes aplicaciones, "
"todas las cuales están incluidas en Django:"

#. type: Bullet: '* '
#: orig/tutorial01.txt:249
msgid ":mod:`django.contrib.auth` -- An authentication system."
msgstr ""
":mod:`django.contrib.auth` -- Un sistema de autenticación."


# TODO traducción para framework
#. type: Bullet: '* '
#: orig/tutorial01.txt:251
msgid ":mod:`django.contrib.contenttypes` -- A framework for content types."
msgstr ""
":mod:`django.contrib.contenttypes` -- Un framework para tipos de contenido."

#. type: Bullet: '* '
#: orig/tutorial01.txt:253
msgid ":mod:`django.contrib.sessions` -- A session framework."
msgstr ""
":mod:`django.contrib.sessions` -- Un framework para sesiones."

#. type: Bullet: '* '
#: orig/tutorial01.txt:256
msgid ""
":mod:`django.contrib.sites` -- A framework for managing multiple sites with "
"one Django installation."
msgstr ""
":mod:`django.contrib.sites` -- Un framework para administrar múltiples sitios "
"con una instalación de Django."

#. type: Bullet: '* '
#: orig/tutorial01.txt:258
msgid ":mod:`django.contrib.messages` -- A messaging framework."
msgstr ""
":mod:`django.contrib.messages` -- Un framework para mensajería."

#. type: Bullet: '* '
#: orig/tutorial01.txt:261
msgid ""
":mod:`django.contrib.staticfiles` -- A framework for managing static files."
msgstr ""
":mod:`django.contrib.staticfiles` -- Un framework para administrar ficheros "
"estáticos."

#. type: Plain text
#: orig/tutorial01.txt:263
msgid ""
"These applications are included by default as a convenience for the common "
"case."
msgstr ""
"Estas aplicaciones se incluyen de manera predeterminada para cubrir casos de "
"uso comunes."

#. type: Plain text
#: orig/tutorial01.txt:267
msgid ""
"Each of these applications makes use of at least one database table, though, "
"so we need to create the tables in the database before we can use them. To "
"do that, run the following command:"
msgstr ""
"Cada una de estas aplicaciones usa al menos una tabla en la base de datos, "
"así que es necesario crear dichas tablas antes de poder usar las "
"aplicaciones. Para hacerlo, ejecute la siguiente orden:"

#. type: Plain text
#: orig/tutorial01.txt:271 orig/tutorial01.txt:512
#, no-wrap
msgid "    python manage.py syncdb\n"
msgstr "    python manage.py syncdb\n"

#. type: Plain text
#: orig/tutorial01.txt:277
msgid ""
"The :djadmin:`syncdb` command looks at the :setting:`INSTALLED_APPS` setting "
"and creates any necessary database tables according to the database settings "
"in your :file:`settings.py` file. You'll see a message for each database "
"table it creates, and you'll get a prompt asking you if you'd like to create "
"a superuser account for the authentication system. Go ahead and do that."
msgstr ""
"La orden :djadmin:`syncdb` consulta la opción :setting:`INSTALLED_APPS` y "
"crea las tablas que sean necesarias, de acuerdo a la configuración de base de "
"datos definida en el fichero :file:`settings.py`. Verá un mensaje por cada "
"tabla de base de datos creada, y aparecerá una línea de órdenes consultándole "
"si desea crear una cuenta de superusuario para el sistema de autenticación. "
"Adelante, hágalo."

#. type: Plain text
#: orig/tutorial01.txt:281
msgid ""
"If you're interested, run the command-line client for your database and type "
"``\\dt`` (PostgreSQL), ``SHOW TABLES;`` (MySQL), or ``.schema`` (SQLite) to "
"display the tables Django created."
msgstr ""
"Si le interesa, abra el intérprete de órdenes de su base de datos y escriba "
"``\\dt`` (PostgreSQL), ``SHOW TABLES;`` (MySQL), o ``.schema`` (SQLite) para "
"listar las tablas creadas por Django."

#. type: Plain text
#: orig/tutorial01.txt:283
msgid ".. admonition:: For the minimalists"
msgstr ".. admonition:: Para los minimalistas"

#. type: Plain text
#: orig/tutorial01.txt:290
#, no-wrap
msgid ""
"    Like we said above, the default applications are included for the common\n"
"    case, but not everybody needs them. If you don't need any or all of them,\n"
"    feel free to comment-out or delete the appropriate line(s) from\n"
"    :setting:`INSTALLED_APPS` before running :djadmin:`syncdb`. The\n"
"    :djadmin:`syncdb` command will only create tables for apps in\n"
"    :setting:`INSTALLED_APPS`.\n"
msgstr ""
"    Como mencionamos anteriormente, las aplicaciones predeterminadas se incluyen\n"
"    para los casos comunes, pero no todos las necesitan. Si no necesita alguna o\n"
"    ninguna de ellas, comente o elimine las líneas necesarias en\n"
"    :setting:`INSTALLED_APPS` antes de ejecutar :djadmin:`syncdb`. La orden\n"
"    :djadmin:`syncdb` sólo creará tablas para las aplicaciones listadas en\n"
"    :setting:`INSTALLED_APPS`.\n"

# TODO check markup
#. type: Plain text
#: orig/tutorial01.txt:292
msgid ".. _creating-models:"
msgstr ".. _crear-modelos:"

#. type: Plain text
#: orig/tutorial01.txt:294
#, no-wrap
msgid ""
"Creating models\n"
"===============\n"
msgstr ""
"Crear modelos\n"
"=============\n"

#. type: Plain text
#: orig/tutorial01.txt:298
msgid ""
"Now that your environment -- a \"project\" -- is set up, you're set to start "
"doing work."
msgstr ""
"Ahora que su entorno de trabajo -- el «proyecto» -- está configurado, puede "
"empezar a trabajar."

#. type: Plain text
#: orig/tutorial01.txt:303
msgid ""
"Each application you write in Django consists of a Python package, somewhere "
"on your `Python path`_, that follows a certain convention. Django comes with "
"a utility that automatically generates the basic directory structure of an "
"app, so you can focus on writing code rather than creating directories."
msgstr ""
"Cada aplicación que escribe con Django consiste en un paquete Python, ubicado "
"en alguna de las carpetas de su ruta Python (`Python path`_), que sigue una "
"convención dada. Django cuenta con una utilidad que genera automáticamente la "
"estructura de directorio básica de una aplicación, para que usted pueda "
"enforcarse en escribir código en vez de crear directorios."

#. type: Plain text
#: orig/tutorial01.txt:305
msgid ".. admonition:: Projects vs. apps"
msgstr ".. admonition:: Proyectos vs. aplicaciones"

#. type: Plain text
#: orig/tutorial01.txt:311
#, no-wrap
msgid ""
"    What's the difference between a project and an app? An app is a Web\n"
"    application that does something -- e.g., a Weblog system, a database of\n"
"    public records or a simple poll app. A project is a collection of\n"
"    configuration and apps for a particular Web site. A project can contain\n"
"    multiple apps. An app can be in multiple projects.\n"
msgstr ""
"¿Cuál es la diferencia entre un proyecto y una aplicación? Una aplicación es\n"
"una aplicación Web que hace algo -- por ejemplo, un sistema para weblogs,\n"
"una base de datos de registros públicos, o una aplicación sencilla para\n"
"encuestas. Un proyecto es una colección de aplicaciones para un sitio Web\n"
"particular. Un proyecto puede contener múltiples aplicaciones. Una\n"
"aplicación puede estar en múltiples proyectos.\n"

#. type: Plain text
#: orig/tutorial01.txt:315
msgid ""
"Your apps can live anywhere on your `Python path`_. In this tutorial, we'll "
"create our poll app right next to your :file:`manage.py` file so that it can "
"be imported as its own top-level module, rather than a submodule of "
"``mysite``."
msgstr ""
"Sus aplicaciones pueden estar en cualquier parte de su `Python path`_. En "
"este tutorial, crearemos nuestra aplicación para encuestas justo al lado del "
"fichero :file:`manage.py`, para poder importarlo como un módulo de primer "
"nivel, en vez de hacerlo como un módulo de ``mysite``."

#. type: Plain text
#: orig/tutorial01.txt:318
msgid ""
"To create your app, make sure you're in the same directory as :file:`manage."
"py` and type this command:"
msgstr ""
"Para crear su aplicación, asegúrese de que se encuentra en el mismo "
"directorio que el del fichero :file:`manage.py`, y ejecute la siguiente "
"orden:"

#. type: Plain text
#: orig/tutorial01.txt:322
#, no-wrap
msgid "    python manage.py startapp polls\n"
msgstr "    python manage.py startapp polls\n"

#. type: Plain text
#: orig/tutorial01.txt:324
msgid "That'll create a directory :file:`polls`, which is laid out like this::"
msgstr ""
"Eso creará un directorio :file:`polls`, que tiene la siguiente estructura::"

#. type: Plain text
#: orig/tutorial01.txt:330
#, no-wrap
msgid ""
"    polls/\n"
"        __init__.py\n"
"        models.py\n"
"        tests.py\n"
"        views.py\n"
msgstr ""
"    polls/\n"
"        __init__.py\n"
"        models.py\n"
"        tests.py\n"
"        views.py\n"

#. type: Plain text
#: orig/tutorial01.txt:332
msgid "This directory structure will house the poll application."
msgstr ""
"Este directorio contendrá la aplicación de encuestas."

#. type: Plain text
#: orig/tutorial01.txt:335
msgid ""
"The first step in writing a database Web app in Django is to define your "
"models -- essentially, your database layout, with additional metadata."
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:337 orig/tutorial01.txt:406
msgid ".. admonition:: Philosophy"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:342
#, no-wrap
msgid ""
"   A model is the single, definitive source of data about your data. It contains\n"
"   the essential fields and behaviors of the data you're storing. Django follows\n"
"   the :ref:`DRY Principle <dry>`. The goal is to define your data model in one\n"
"   place and automatically derive things from it.\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:346
msgid ""
"In our simple poll app, we'll create two models: polls and choices. A poll "
"has a question and a publication date. A choice has two fields: the text of "
"the choice and a vote tally. Each choice is associated with a poll."
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:349
msgid ""
"These concepts are represented by simple Python classes. Edit the :file:"
"`polls/models.py` file so it looks like this::"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:351
#, no-wrap
msgid "    from django.db import models\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:355
#, no-wrap
msgid ""
"    class Poll(models.Model):\n"
"        question = models.CharField(max_length=200)\n"
"        pub_date = models.DateTimeField('date published')\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:360
#, no-wrap
msgid ""
"    class Choice(models.Model):\n"
"        poll = models.ForeignKey(Poll)\n"
"        choice = models.CharField(max_length=200)\n"
"        votes = models.IntegerField()\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:364
msgid ""
"The code is straightforward. Each model is represented by a class that "
"subclasses :class:`django.db.models.Model`. Each model has a number of class "
"variables, each of which represents a database field in the model."
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:369
msgid ""
"Each field is represented by an instance of a :class:`~django.db.models."
"Field` class -- e.g., :class:`~django.db.models.CharField` for character "
"fields and :class:`~django.db.models.DateTimeField` for datetimes. This "
"tells Django what type of data each field holds."
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:373
msgid ""
"The name of each :class:`~django.db.models.Field` instance (e.g. "
"``question`` or ``pub_date`` ) is the field's name, in machine-friendly "
"format. You'll use this value in your Python code, and your database will "
"use it as the column name."
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:381
msgid ""
"You can use an optional first positional argument to a :class:`~django.db."
"models.Field` to designate a human-readable name. That's used in a couple of "
"introspective parts of Django, and it doubles as documentation.  If this "
"field isn't provided, Django will use the machine-readable name. In this "
"example, we've only defined a human-readable name for ``Poll.pub_date``. For "
"all other fields in this model, the field's machine-readable name will "
"suffice as its human-readable name."
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:386
msgid ""
"Some :class:`~django.db.models.Field` classes have required elements.  :"
"class:`~django.db.models.CharField`, for example, requires that you give it "
"a :attr:`~django.db.models.Field.max_length`. That's used not only in the "
"database schema, but in validation, as we'll soon see."
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:391
msgid ""
"Finally, note a relationship is defined, using :class:`~django.db.models."
"ForeignKey`. That tells Django each Choice is related to a single Poll. "
"Django supports all the common database relationships: many-to-ones, many-to-"
"manys and one-to-ones."
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:393
msgid ""
".. _`Python path`: http://docs.python.org/tutorial/modules.html#the-module-"
"search-path"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:395
#, no-wrap
msgid ""
"Activating models\n"
"=================\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:399
msgid ""
"That small bit of model code gives Django a lot of information. With it, "
"Django is able to:"
msgstr ""

#. type: Bullet: '* '
#: orig/tutorial01.txt:402
msgid "Create a database schema (``CREATE TABLE`` statements) for this app."
msgstr ""

#. type: Bullet: '* '
#: orig/tutorial01.txt:402
msgid ""
"Create a Python database-access API for accessing Poll and Choice objects."
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:404
msgid ""
"But first we need to tell our project that the ``polls`` app is installed."
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:410
#, no-wrap
msgid ""
"    Django apps are \"pluggable\": You can use an app in multiple projects, and\n"
"    you can distribute apps, because they don't have to be tied to a given\n"
"    Django installation.\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:414
msgid ""
"Edit the :file:`settings.py` file again, and change the :setting:"
"`INSTALLED_APPS` setting to include the string ``'polls'``. So it'll look "
"like this::"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:428
#, no-wrap
msgid ""
"    INSTALLED_APPS = (\n"
"        'django.contrib.auth',\n"
"        'django.contrib.contenttypes',\n"
"        'django.contrib.sessions',\n"
"        'django.contrib.sites',\n"
"        'django.contrib.messages',\n"
"        'django.contrib.staticfiles',\n"
"        # Uncomment the next line to enable the admin:\n"
"        # 'django.contrib.admin',\n"
"        # Uncomment the next line to enable admin documentation:\n"
"        # 'django.contrib.admindocs',\n"
"        'polls',\n"
"    )\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:431
msgid ""
"Now Django knows to include the ``polls`` app. Let's run another command:"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:435
#, no-wrap
msgid "    python manage.py sql polls\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:438
msgid ""
"You should see something similar to the following (the ``CREATE TABLE`` SQL "
"statements for the polls app):"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:440
msgid ".. code-block:: sql"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:454
#, no-wrap
msgid ""
"    BEGIN;\n"
"    CREATE TABLE \"polls_poll\" (\n"
"        \"id\" serial NOT NULL PRIMARY KEY,\n"
"        \"question\" varchar(200) NOT NULL,\n"
"        \"pub_date\" timestamp with time zone NOT NULL\n"
"    );\n"
"    CREATE TABLE \"polls_choice\" (\n"
"        \"id\" serial NOT NULL PRIMARY KEY,\n"
"        \"poll_id\" integer NOT NULL REFERENCES \"polls_poll\" (\"id\") DEFERRABLE INITIALLY DEFERRED,\n"
"        \"choice\" varchar(200) NOT NULL,\n"
"        \"votes\" integer NOT NULL\n"
"    );\n"
"    COMMIT;\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:456
msgid "Note the following:"
msgstr ""

#. type: Bullet: '* '
#: orig/tutorial01.txt:458
msgid "The exact output will vary depending on the database you are using."
msgstr ""

#. type: Bullet: '* '
#: orig/tutorial01.txt:462
msgid ""
"Table names are automatically generated by combining the name of the app "
"(``polls``) and the lowercase name of the model -- ``poll`` and ``choice``. "
"(You can override this behavior.)"
msgstr ""

#. type: Bullet: '* '
#: orig/tutorial01.txt:464
msgid ""
"Primary keys (IDs) are added automatically. (You can override this, too.)"
msgstr ""

#. type: Bullet: '* '
#: orig/tutorial01.txt:467
msgid ""
"By convention, Django appends ``\"_id\"`` to the foreign key field name.  "
"(Yes, you can override this, as well.)"
msgstr ""

#. type: Bullet: '* '
#: orig/tutorial01.txt:470
msgid ""
"The foreign key relationship is made explicit by a ``REFERENCES`` statement."
msgstr ""

#. type: Bullet: '* '
#: orig/tutorial01.txt:477
msgid ""
"It's tailored to the database you're using, so database-specific field types "
"such as ``auto_increment`` (MySQL), ``serial`` (PostgreSQL), or ``integer "
"primary key`` (SQLite) are handled for you automatically. Same goes for "
"quoting of field names -- e.g., using double quotes or single quotes. The "
"author of this tutorial runs PostgreSQL, so the example output is in "
"PostgreSQL syntax."
msgstr ""

#. type: Bullet: '* '
#: orig/tutorial01.txt:483
msgid ""
"The :djadmin:`sql` command doesn't actually run the SQL in your database - "
"it just prints it to the screen so that you can see what SQL Django thinks "
"is required. If you wanted to, you could copy and paste this SQL into your "
"database prompt. However, as we will see shortly, Django provides an easier "
"way of committing the SQL to the database."
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:485
msgid "If you're interested, also run the following commands:"
msgstr ""

#. type: Bullet: '* '
#: orig/tutorial01.txt:488
msgid ""
":djadmin:`python manage.py validate <validate>` -- Checks for any errors in "
"the construction of your models."
msgstr ""

#. type: Bullet: '* '
#: orig/tutorial01.txt:492
msgid ""
":djadmin:`python manage.py sqlcustom polls <sqlcustom>` -- Outputs any :ref:"
"`custom SQL statements <initial-sql>` (such as table modifications or "
"constraints) that are defined for the application."
msgstr ""

#. type: Bullet: '* '
#: orig/tutorial01.txt:496
msgid ""
":djadmin:`python manage.py sqlclear polls <sqlclear>` -- Outputs the "
"necessary ``DROP TABLE`` statements for this app, according to which tables "
"already exist in your database (if any)."
msgstr ""

#. type: Bullet: '* '
#: orig/tutorial01.txt:499
msgid ""
":djadmin:`python manage.py sqlindexes polls <sqlindexes>` -- Outputs the "
"``CREATE INDEX`` statements for this app."
msgstr ""

#. type: Bullet: '* '
#: orig/tutorial01.txt:503
msgid ""
":djadmin:`python manage.py sqlall polls <sqlall>` -- A combination of all "
"the SQL from the :djadmin:`sql`, :djadmin:`sqlcustom`, and :djadmin:"
"`sqlindexes` commands."
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:506
msgid ""
"Looking at the output of those commands can help you understand what's "
"actually happening under the hood."
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:508
msgid ""
"Now, run :djadmin:`syncdb` again to create those model tables in your "
"database:"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:519
msgid ""
"The :djadmin:`syncdb` command runs the SQL from :djadmin:`sqlall` on your "
"database for all apps in :setting:`INSTALLED_APPS` that don't already exist "
"in your database. This creates all the tables, initial data and indexes for "
"any apps you've added to your project since the last time you ran syncdb.  :"
"djadmin:`syncdb` can be called as often as you like, and it will only ever "
"create the tables that don't exist."
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:522
msgid ""
"Read the :doc:`django-admin.py documentation </ref/django-admin>` for full "
"information on what the ``manage.py`` utility can do."
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:524
#, no-wrap
msgid ""
"Playing with the API\n"
"====================\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:528
msgid ""
"Now, let's hop into the interactive Python shell and play around with the "
"free API Django gives you. To invoke the Python shell, use this command:"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:532
#, no-wrap
msgid "    python manage.py shell\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:536
msgid ""
"We're using this instead of simply typing \"python\", because :file:`manage."
"py` sets the ``DJANGO_SETTINGS_MODULE`` environment variable, which gives "
"Django the Python import path to your :file:`settings.py` file."
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:538
msgid ".. admonition:: Bypassing manage.py"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:543
#, no-wrap
msgid ""
"    If you'd rather not use :file:`manage.py`, no problem. Just set the\n"
"    ``DJANGO_SETTINGS_MODULE`` environment variable to ``mysite.settings`` and\n"
"    run ``python`` from the same directory :file:`manage.py` is in (or ensure\n"
"    that directory is on the Python path, so that ``import mysite`` works).\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:546
#, no-wrap
msgid ""
"    For more information on all of this, see the :doc:`django-admin.py\n"
"    documentation </ref/django-admin>`.\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:548
msgid ""
"Once you're in the shell, explore the :doc:`database API </topics/db/"
"queries>`::"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:550
#, no-wrap
msgid "    >>> from polls.models import Poll, Choice   # Import the model classes we just wrote.\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:554
#, no-wrap
msgid ""
"    # No polls are in the system yet.\n"
"    >>> Poll.objects.all()\n"
"    []\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:561
#, no-wrap
msgid ""
"    # Create a new Poll.\n"
"    # Support for time zones is enabled in the default settings file, so\n"
"    # Django expects a datetime with tzinfo for pub_date. Use timezone.now()\n"
"    # instead of datetime.datetime.now() and it will do the right thing.\n"
"    >>> from django.utils import timezone\n"
"    >>> p = Poll(question=\"What's new?\", pub_date=timezone.now())\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:564
#, no-wrap
msgid ""
"    # Save the object into the database. You have to call save() explicitly.\n"
"    >>> p.save()\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:571
#, no-wrap
msgid ""
"    # Now it has an ID. Note that this might say \"1L\" instead of \"1\", depending\n"
"    # on which database you're using. That's no biggie; it just means your\n"
"    # database backend prefers to return integers as Python long integer\n"
"    # objects.\n"
"    >>> p.id\n"
"    1\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:577
#, no-wrap
msgid ""
"    # Access database columns via Python attributes.\n"
"    >>> p.question\n"
"    \"What's new?\"\n"
"    >>> p.pub_date\n"
"    datetime.datetime(2012, 2, 26, 13, 0, 0, 775217, tzinfo=<UTC>)\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:581
#, no-wrap
msgid ""
"    # Change values by changing the attributes, then calling save().\n"
"    >>> p.question = \"What's up?\"\n"
"    >>> p.save()\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:585
#, no-wrap
msgid ""
"    # objects.all() displays all the polls in the database.\n"
"    >>> Poll.objects.all()\n"
"    [<Poll: Poll object>]\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:592
msgid ""
"Wait a minute. ``<Poll: Poll object>`` is, utterly, an unhelpful "
"representation of this object. Let's fix that by editing the polls model (in "
"the ``polls/models.py`` file) and adding a :meth:`~django.db.models.Model."
"__unicode__` method to both ``Poll`` and ``Choice``::"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:597
#, no-wrap
msgid ""
"    class Poll(models.Model):\n"
"        # ...\n"
"        def __unicode__(self):\n"
"            return self.question\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:602
#, no-wrap
msgid ""
"    class Choice(models.Model):\n"
"        # ...\n"
"        def __unicode__(self):\n"
"            return self.choice\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:607
msgid ""
"It's important to add :meth:`~django.db.models.Model.__unicode__` methods to "
"your models, not only for your own sanity when dealing with the interactive "
"prompt, but also because objects' representations are used throughout "
"Django's automatically-generated admin."
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:610
#, no-wrap
msgid ""
".. admonition:: Why :meth:`~django.db.models.Model.__unicode__` and not\n"
"                :meth:`~django.db.models.Model.__str__`?\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:617
#, no-wrap
msgid ""
"    If you're familiar with Python, you might be in the habit of adding\n"
"    :meth:`~django.db.models.Model.__str__` methods to your classes, not\n"
"    :meth:`~django.db.models.Model.__unicode__` methods. We use\n"
"    :meth:`~django.db.models.Model.__unicode__` here because Django models deal\n"
"    with Unicode by default. All data stored in your database is converted to\n"
"    Unicode when it's returned.\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:623
#, no-wrap
msgid ""
"    Django models have a default :meth:`~django.db.models.Model.__str__` method\n"
"    that calls :meth:`~django.db.models.Model.__unicode__` and converts the\n"
"    result to a UTF-8 bytestring. This means that ``unicode(p)`` will return a\n"
"    Unicode string, and ``str(p)`` will return a normal string, with characters\n"
"    encoded as UTF-8.\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:627
#, no-wrap
msgid ""
"    If all of this is gibberish to you, just remember to add\n"
"    :meth:`~django.db.models.Model.__unicode__` methods to your models. With any\n"
"    luck, things should Just Work for you.\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:630
msgid ""
"Note these are normal Python methods. Let's add a custom method, just for "
"demonstration::"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:638
#, no-wrap
msgid ""
"    import datetime\n"
"    from django.utils import timezone\n"
"    # ...\n"
"    class Poll(models.Model):\n"
"        # ...\n"
"        def was_published_recently(self):\n"
"            return self.pub_date >= timezone.now() - datetime.timedelta(days=1)\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:644
msgid ""
"Note the addition of ``import datetime`` and ``from django.utils import "
"timezone``, to reference Python's standard :mod:`datetime` module and "
"Django's time-zone-related utilities in :mod:`django.utils.timezone`, "
"respectively. If you aren't familiar with time zone handling in Python, you "
"can learn more in the :doc:`time zone support docs </topics/i18n/timezones>`."
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:647
msgid ""
"Save these changes and start a new Python interactive shell by running "
"``python manage.py shell`` again::"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:649
#, no-wrap
msgid "    >>> from polls.models import Poll, Choice\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:653
#, no-wrap
msgid ""
"    # Make sure our __unicode__() addition worked.\n"
"    >>> Poll.objects.all()\n"
"    [<Poll: What's up?>]\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:660
#, no-wrap
msgid ""
"    # Django provides a rich database lookup API that's entirely driven by\n"
"    # keyword arguments.\n"
"    >>> Poll.objects.filter(id=1)\n"
"    [<Poll: What's up?>]\n"
"    >>> Poll.objects.filter(question__startswith='What')\n"
"    [<Poll: What's up?>]\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:664
#, no-wrap
msgid ""
"    # Get the poll whose year is 2012.\n"
"    >>> Poll.objects.get(pub_date__year=2012)\n"
"    <Poll: What's up?>\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:669
#, no-wrap
msgid ""
"    >>> Poll.objects.get(id=2)\n"
"    Traceback (most recent call last):\n"
"        ...\n"
"    DoesNotExist: Poll matching query does not exist.\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:675
#, no-wrap
msgid ""
"    # Lookup by a primary key is the most common case, so Django provides a\n"
"    # shortcut for primary-key exact lookups.\n"
"    # The following is identical to Poll.objects.get(id=1).\n"
"    >>> Poll.objects.get(pk=1)\n"
"    <Poll: What's up?>\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:680
#, no-wrap
msgid ""
"    # Make sure our custom method worked.\n"
"    >>> p = Poll.objects.get(pk=1)\n"
"    >>> p.was_published_recently()\n"
"    True\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:687
#, no-wrap
msgid ""
"    # Give the Poll a couple of Choices. The create call constructs a new\n"
"    # choice object, does the INSERT statement, adds the choice to the set\n"
"    # of available choices and returns the new Choice object. Django creates\n"
"    # a set to hold the \"other side\" of a ForeignKey relation\n"
"    # (e.g. a poll's choices) which can be accessed via the API.\n"
"    >>> p = Poll.objects.get(pk=1)\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:691
#, no-wrap
msgid ""
"    # Display any choices from the related object set -- none so far.\n"
"    >>> p.choice_set.all()\n"
"    []\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:698
#, no-wrap
msgid ""
"    # Create three choices.\n"
"    >>> p.choice_set.create(choice='Not much', votes=0)\n"
"    <Choice: Not much>\n"
"    >>> p.choice_set.create(choice='The sky', votes=0)\n"
"    <Choice: The sky>\n"
"    >>> c = p.choice_set.create(choice='Just hacking again', votes=0)\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:702
#, no-wrap
msgid ""
"    # Choice objects have API access to their related Poll objects.\n"
"    >>> c.poll\n"
"    <Poll: What's up?>\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:708
#, no-wrap
msgid ""
"    # And vice versa: Poll objects get access to Choice objects.\n"
"    >>> p.choice_set.all()\n"
"    [<Choice: Not much>, <Choice: The sky>, <Choice: Just hacking again>]\n"
"    >>> p.choice_set.count()\n"
"    3\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:715
#, no-wrap
msgid ""
"    # The API automatically follows relationships as far as you need.\n"
"    # Use double underscores to separate relationships.\n"
"    # This works as many levels deep as you want; there's no limit.\n"
"    # Find all Choices for any poll whose pub_date is in 2012.\n"
"    >>> Choice.objects.filter(poll__pub_date__year=2012)\n"
"    [<Choice: Not much>, <Choice: The sky>, <Choice: Just hacking again>]\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:719
#, no-wrap
msgid ""
"    # Let's delete one of the choices. Use delete() for that.\n"
"    >>> c = p.choice_set.filter(choice__startswith='Just hacking')\n"
"    >>> c.delete()\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:725
msgid ""
"For more information on model relations, see :doc:`Accessing related objects "
"</ref/models/relations>`. For more on how to use double underscores to "
"perform field lookups via the API, see :ref:`Field lookups <field-lookups-"
"intro>`. For full details on the database API, see our :doc:`Database API "
"reference </topics/db/queries>`."
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:727
msgid ""
"When you're comfortable with the API, read :doc:`part 2 of this tutorial </"
"intro/tutorial02>` to get Django's automatic admin working."
msgstr ""
