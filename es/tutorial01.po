# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2012-03-21 13:08-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Javier Rojas <jerojasro@devnull.li>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: orig/tutorial01.txt:1
#, no-wrap
msgid "=====================================\n"
msgstr "==============================================\n"

#. type: Plain text
#: orig/tutorial01.txt:3
#, no-wrap
msgid ""
"Writing your first Django app, part 1\n"
"=====================================\n"
msgstr ""
"Escribir su primera aplicación Django, parte 1\n"
"==============================================\n"

#. type: Plain text
#: orig/tutorial01.txt:6
msgid "Let's learn by example."
msgstr "Vamos a aprender con un ejemplo."

#. type: Plain text
#: orig/tutorial01.txt:9
msgid ""
"Throughout this tutorial, we'll walk you through the creation of a basic "
"poll application."
msgstr ""
"A lo largo de este tutorial, le guiaremos en la creación de una aplicación "
"básica para encuestas (polls)."

#. type: Plain text
#: orig/tutorial01.txt:11
msgid "It'll consist of two parts:"
msgstr "Consistirá de dos partes:"

#. type: Bullet: '    * '
#: orig/tutorial01.txt:14
msgid "A public site that lets people view polls and vote in them."
msgstr ""
"Un sitio público que permite a sus visitantes ver encuestas y votar en ellas."

#. type: Bullet: '    * '
#: orig/tutorial01.txt:14
msgid "An admin site that lets you add, change and delete polls."
msgstr ""
"Y un sitio administrativo que le permite añadir, modificar y borrar encuestas."

#. type: Plain text
#: orig/tutorial01.txt:19
msgid ""
"We'll assume you have :doc:`Django installed </intro/install>` already. You "
"can tell Django is installed by running the Python interactive interpreter "
"and typing ``import django``. If that command runs successfully, with no "
"errors, Django is installed."
msgstr ""
"Asumiremos que ya ha :doc:`instalado Django</intro/install>`. Puede confirmar "
"que Django está instalado ejecutando el intérprete interactivo de Python y "
"ejecutando la orden ``import django``. Si dicha orden se ejecuta "
"exitosamente, sin errores, Django está instalado."

#. type: Plain text
#: orig/tutorial01.txt:21
msgid ".. admonition:: Where to get help:"
msgstr ".. admonition:: Dónde conseguir ayuda:"

# TODO ver cómo mencionar #django-es
#. type: Plain text
#: orig/tutorial01.txt:25
#, no-wrap
msgid ""
"    If you're having trouble going through this tutorial, please post a "
"message\n"
"    to `django-users`__ or drop by `#django on irc.freenode.net`__ to chat\n"
"    with other Django users who might be able to help.\n"
msgstr ""
"    Si encuentra problemas al seguir este tutorial, por favor envíe un mensaje a\n"
"    `django-users`__ o ingrese al canal `#django en irc.freenode.net`__ para\n"
"    hablar con otros usuarios de Django que podrían ayudarlo.\n"

#. type: Plain text
#: orig/tutorial01.txt:28
msgid ""
"__ http://groups.google.com/group/django-users __ "
"irc://irc.freenode.net/django"
msgstr ""
"__ http://groups.google.com/group/django-users __ "
"irc://irc.freenode.net/django"

#. type: Plain text
#: orig/tutorial01.txt:30
#, no-wrap
msgid ""
"Creating a project\n"
"==================\n"
msgstr ""
"Crear un proyecto\n"
"=================\n"

#. type: Plain text
#: orig/tutorial01.txt:37
msgid ""
"If this is your first time using Django, you'll have to take care of some "
"initial setup. Namely, you'll need to auto-generate some code that "
"establishes a Django :term:`project` -- a collection of settings for an "
"instance of Django, including database configuration, Django-specific "
"options and application-specific settings."
msgstr ""
"Si esta es la primera vez que usa Django, tendrá que encargarse de su "
"configuración inicial. En particular, tendrá que auto-generar el código con "
"el que puede iniciar un :term:`proyecto` Django -- un conjunto de "
"configuraciones para una instancia de Django, que incluye configuración de "
"base de datos, opciones específicas de Django, y opciones específicas de la "
"aplicación."

#. type: Plain text
#: orig/tutorial01.txt:40
msgid ""
"From the command line, ``cd`` into a directory where you'd like to store "
"your code, then run the following command:"
msgstr ""
"Desde el intérprete de órdenes, ingrese (``cd``) al directorio en que desea "
"ubicar su código, y luego ejecute la siguiente orden:"


#. type: Plain text
#: orig/tutorial01.txt:42 orig/tutorial01.txt:245 orig/tutorial01.txt:295 orig/tutorial01.txt:402 orig/tutorial01.txt:479 orig/tutorial01.txt:499
msgid ".. code-block:: bash"
msgstr ".. code-block:: bash"

#. type: Plain text
#: orig/tutorial01.txt:44
#, no-wrap
msgid "   django-admin.py startproject mysite\n"
msgstr "   django-admin.py startproject mysite\n"

#. type: Plain text
#: orig/tutorial01.txt:46
msgid "This will create a ``mysite`` directory in your current directory."
msgstr ""
"Esta orden creará un directorio llamado ``mysite`` dentro del directorio "
"actual."

#. type: Plain text
#: orig/tutorial01.txt:48
msgid ".. admonition:: Script name may differ in distribution packages"
msgstr ""
".. admonition:: El nombre del script puede diferir dependiendo de cómo se "
"haya instalado Django"

#. type: Plain text
#: orig/tutorial01.txt:53
#, no-wrap
msgid ""
"   If you installed Django using a Linux distribution's package manager\n"
"   (e.g. apt-get or yum) ``django-admin.py`` may have been renamed to\n"
"   ``django-admin``. You may continue through this documentation by "
"omitting\n"
"   ``.py`` from each command.\n"
msgstr ""
"   Si instaló Django usando el administrador de paquetes de una distribución de\n"
"   Linux (p.ej., apt-get o yum) ``django-admin.py`` puede haber sido renombrado\n"
"   como ``django-admin``. En dicho caso, puede continuar usando esta\n"
"   documentación, teniendo el cuidado de no escribir el ``.py`` en cada orden.\n"

#. type: Plain text
#: orig/tutorial01.txt:55
msgid ".. admonition:: Mac OS X permissions"
msgstr ".. admonition:: Permisos en Mac OS X"

#. type: Plain text
#: orig/tutorial01.txt:63
#, no-wrap
msgid ""
"   If you're using Mac OS X, you may see the message \"permission denied\" "
"when\n"
"   you try to run ``django-admin.py startproject``. This is because, on\n"
"   Unix-based systems like OS X, a file must be marked as \"executable\" "
"before it\n"
"   can be run as a program. To do this, open Terminal.app and navigate "
"(using\n"
"   the ``cd`` command) to the directory where :doc:`django-admin.py\n"
"   </ref/django-admin>` is installed, then run the command\n"
"   ``chmod +x django-admin.py``.\n"
msgstr ""
"   Si está usando Mac OS X, puede que se encuentre con el mensaje «permission\n"
"   denied» al tratar de ejecutar ``django-admin.py startproject``. En sistemas\n"
"   basados en Unix como Mac OS X, un fichero debe ser marcado como «ejecutable»\n"
"   antes de poder ejecutarse como un programa. Para hacerlo, abra Terminal.app,\n"
"   ubíquese (usando la orden ``cd``) en el directorio en donde está instalado el\n"
"   script :doc:`django-admin.py </ref/django-admin>`, y ejecute la orden ``chmod\n"
"   +x django-admin.py``.\n"

# TODO revisar si esto se puede traducir o no
#. type: Plain text
#: orig/tutorial01.txt:65 orig/tutorial01.txt:207
msgid ".. note::"
msgstr ".. note::"

#. type: Plain text
#: orig/tutorial01.txt:70
#, no-wrap
msgid ""
"    You'll need to avoid naming projects after built-in Python or Django\n"
"    components. In particular, this means you should avoid using names "
"like\n"
"    ``django`` (which will conflict with Django itself) or ``test`` (which\n"
"    conflicts with a built-in Python package).\n"
msgstr ""
"   Debe evitar usar nombres de componentes integrados de Python o Django en sus\n"
"   proyectos. En particular, debe abstenerse de usar nombres como ``django`` (lo\n"
"   que crearía un conflicto con Django) o ``test`` (que entra en conflicto con\n"
"   un paquete integrado de Python).\n"

#. type: Plain text
#: orig/tutorial01.txt:77
msgid ""
":doc:`django-admin.py </ref/django-admin>` should be on your system path if "
"you installed Django via ``python setup.py``. If it's not on your path, you "
"can find it in ``site-packages/django/bin``, where ```site-packages``` is a "
"directory within your Python installation. Consider symlinking to "
":doc:`django-admin.py </ref/django-admin>` from some place on your path, "
"such as :file:`/usr/local/bin`."
msgstr ""
"Si instaló Django usando ``python setup.py``, :doc:`django-admin.py "
"</ref/django-admin>` debe estar en la ruta de su sistema (system path). Si no "
"lo está, puede encontrarlo en ``site-packages/django/bin``, en donde "
"```site-packages``` es un directorio dentro de su instalación de Python. Se "
"sugiere crear un enlace simbólico a :doc:`django-admin.py "
"</ref/django-admin>` desde algún sitio que se encuentre en la ruta de su "
"sistema, como por ejemplo :file:`/usr/local/bin`."

#. type: Plain text
#: orig/tutorial01.txt:79
msgid ".. admonition:: Where should this code live?"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:86
#, no-wrap
msgid ""
"    If your background is in PHP, you're probably used to putting code under "
"the\n"
"    Web server's document root (in a place such as ``/var/www``). With "
"Django,\n"
"    you don't do that. It's not a good idea to put any of this Python code\n"
"    within your Web server's document root, because it risks the "
"possibility\n"
"    that people may be able to view your code over the Web. That's not good "
"for\n"
"    security.\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:89
#, no-wrap
msgid ""
"    Put your code in some directory **outside** of the document root, such "
"as\n"
"    :file:`/home/mycode`.\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:91
msgid "Let's look at what :djadmin:`startproject` created::"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:97
#, no-wrap
msgid ""
"    mysite/\n"
"        __init__.py\n"
"        manage.py\n"
"        settings.py\n"
"        urls.py\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:99
msgid "These files are:"
msgstr ""

#. type: Bullet: '    * '
#: orig/tutorial01.txt:103
msgid ""
":file:`__init__.py`: An empty file that tells Python that this directory "
"should be considered a Python package. (Read `more about packages`_ in the "
"official Python docs if you're a Python beginner.)"
msgstr ""

#. type: Bullet: '    * '
#: orig/tutorial01.txt:107
msgid ""
":file:`manage.py`: A command-line utility that lets you interact with this "
"Django project in various ways. You can read all the details about "
":file:`manage.py` in :doc:`/ref/django-admin`."
msgstr ""

#. type: Bullet: '    * '
#: orig/tutorial01.txt:110
msgid ""
":file:`settings.py`: Settings/configuration for this Django project.  "
":doc:`/topics/settings` will tell you all about how settings work."
msgstr ""

#. type: Bullet: '    * '
#: orig/tutorial01.txt:114
msgid ""
":file:`urls.py`: The URL declarations for this Django project; a \"table of "
"contents\" of your Django-powered site. You can read more about URLs in "
":doc:`/topics/http/urls`."
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:116
msgid ""
".. _more about packages: "
"http://docs.python.org/tutorial/modules.html#packages"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:118
#, no-wrap
msgid ""
"The development server\n"
"----------------------\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:123
msgid ""
"Let's verify this worked. Change into the :file:`mysite` directory, if you "
"haven't already, and run the command ``python manage.py runserver``. You'll "
"see the following output on the command line::"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:126
#, no-wrap
msgid ""
"    Validating models...\n"
"    0 errors found.\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:130
#, no-wrap
msgid ""
"    Django version 1.0, using settings 'mysite.settings'\n"
"    Development server is running at http://127.0.0.1:8000/\n"
"    Quit the server with CONTROL-C.\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:135
msgid ""
"You've started the Django development server, a lightweight Web server "
"written purely in Python. We've included this with Django so you can develop "
"things rapidly, without having to deal with configuring a production server "
"-- such as Apache -- until you're ready for production."
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:139
msgid ""
"Now's a good time to note: DON'T use this server in anything resembling a "
"production environment. It's intended only for use while developing. (We're "
"in the business of making Web frameworks, not Web servers.)"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:143
msgid ""
"Now that the server's running, visit http://127.0.0.1:8000/ with your Web "
"browser. You'll see a \"Welcome to Django\" page, in pleasant, light-blue "
"pastel.  It worked!"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:145
msgid ".. admonition:: Changing the port"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:148
#, no-wrap
msgid ""
"    By default, the :djadmin:`runserver` command starts the development "
"server\n"
"    on the internal IP at port 8000.\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:152
#, no-wrap
msgid ""
"    If you want to change the server's port, pass\n"
"    it as a command-line argument. For instance, this command starts the "
"server\n"
"    on port 8080:\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:154 orig/tutorial01.txt:162
#, no-wrap
msgid "    .. code-block:: bash\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:156
#, no-wrap
msgid "        python manage.py runserver 8080\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:160
#, no-wrap
msgid ""
"    If you want to change the server's IP, pass it along with the port. So "
"to\n"
"    listen on all public IPs (useful if you want to show off your work on "
"other\n"
"    computers), use:\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:164
#, no-wrap
msgid "        python manage.py runserver 0.0.0.0:8000\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:167
#, no-wrap
msgid ""
"    Full docs for the development server can be found in the\n"
"    :djadmin:`runserver` reference.\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:169
#, no-wrap
msgid ""
"Database setup\n"
"--------------\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:175
msgid ""
"Now, edit :file:`settings.py`. It's a normal Python module with module-level "
"variables representing Django settings. Change the following keys in the "
":setting:`DATABASES` ``'default'`` item to match your databases connection "
"settings."
msgstr ""

#. type: Bullet: '    * '
#: orig/tutorial01.txt:181
msgid ""
":setting:`ENGINE <DATABASE-ENGINE>` -- Either "
"``'django.db.backends.postgresql_psycopg2'``, ``'django.db.backends.mysql'`` "
"or ``'django.db.backends.sqlite3'``. Other backends are :setting:`also "
"available <DATABASE-ENGINE>`."
msgstr ""

#. type: Bullet: '    * '
#: orig/tutorial01.txt:188
msgid ""
":setting:`NAME` -- The name of your database. If you're using SQLite, the "
"database will be a file on your computer; in that case, :setting:`NAME` "
"should be the full absolute path, including filename, of that file. If the "
"file doesn't exist, it will automatically be created when you synchronize "
"the database for the first time (see below)."
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:191
#, no-wrap
msgid ""
"      When specifying the path, always use forward slashes, even on\n"
"      Windows (e.g. ``C:/homes/user/mysite/sqlite3.db``).\n"
msgstr ""

#. type: Bullet: '    * '
#: orig/tutorial01.txt:193
msgid ":setting:`USER` -- Your database username (not used for SQLite)."
msgstr ""

#. type: Bullet: '    * '
#: orig/tutorial01.txt:196
msgid ":setting:`PASSWORD` -- Your database password (not used for SQLite)."
msgstr ""

#. type: Bullet: '    * '
#: orig/tutorial01.txt:200
msgid ""
":setting:`HOST` -- The host your database is on. Leave this as an empty "
"string if your database server is on the same physical machine (not used for "
"SQLite)."
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:205
msgid ""
"If you're new to databases, we recommend simply using SQLite (by setting "
":setting:`ENGINE` to ``'django.db.backends.sqlite3'``). SQLite is included "
"as part of Python 2.5 and later, so you won't need to install anything else."
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:211
#, no-wrap
msgid ""
"    If you're using PostgreSQL or MySQL, make sure you've created a database "
"by\n"
"    this point. Do that with \"``CREATE DATABASE database_name;``\" within "
"your\n"
"    database's interactive prompt.\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:214
#, no-wrap
msgid ""
"    If you're using SQLite, you don't need to create anything beforehand - "
"the\n"
"    database file will be created automatically when it is needed.\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:220
msgid ""
"While you're editing :file:`settings.py`, take note of the "
":setting:`INSTALLED_APPS` setting towards the bottom of the file. That "
"variable holds the names of all Django applications that are activated in "
"this Django instance. Apps can be used in multiple projects, and you can "
"package and distribute them for use by others in their projects."
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:223
msgid ""
"By default, :setting:`INSTALLED_APPS` contains the following apps, all of "
"which come with Django:"
msgstr ""

#. type: Bullet: '    * '
#: orig/tutorial01.txt:225
msgid ":mod:`django.contrib.auth` -- An authentication system."
msgstr ""

#. type: Bullet: '    * '
#: orig/tutorial01.txt:227
msgid ":mod:`django.contrib.contenttypes` -- A framework for content types."
msgstr ""

#. type: Bullet: '    * '
#: orig/tutorial01.txt:229
msgid ":mod:`django.contrib.sessions` -- A session framework."
msgstr ""

#. type: Bullet: '    * '
#: orig/tutorial01.txt:232
msgid ""
":mod:`django.contrib.sites` -- A framework for managing multiple sites with "
"one Django installation."
msgstr ""

#. type: Bullet: '    * '
#: orig/tutorial01.txt:234
msgid ":mod:`django.contrib.messages` -- A messaging framework."
msgstr ""

#. type: Bullet: '    * '
#: orig/tutorial01.txt:237
msgid ":mod:`django.contrib.staticfiles` -- A framework for managing static files."
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:239
msgid ""
"These applications are included by default as a convenience for the common "
"case."
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:243
msgid ""
"Each of these applications makes use of at least one database table, though, "
"so we need to create the tables in the database before we can use them. To "
"do that, run the following command:"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:247 orig/tutorial01.txt:481
#, no-wrap
msgid "    python manage.py syncdb\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:253
msgid ""
"The :djadmin:`syncdb` command looks at the :setting:`INSTALLED_APPS` setting "
"and creates any necessary database tables according to the database settings "
"in your :file:`settings.py` file. You'll see a message for each database "
"table it creates, and you'll get a prompt asking you if you'd like to create "
"a superuser account for the authentication system. Go ahead and do that."
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:257
msgid ""
"If you're interested, run the command-line client for your database and type "
"``\\dt`` (PostgreSQL), ``SHOW TABLES;`` (MySQL), or ``.schema`` (SQLite) to "
"display the tables Django created."
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:259
msgid ".. admonition:: For the minimalists"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:266
#, no-wrap
msgid ""
"    Like we said above, the default applications are included for the "
"common\n"
"    case, but not everybody needs them. If you don't need any or all of "
"them,\n"
"    feel free to comment-out or delete the appropriate line(s) from\n"
"    :setting:`INSTALLED_APPS` before running :djadmin:`syncdb`. The\n"
"    :djadmin:`syncdb` command will only create tables for apps in\n"
"    :setting:`INSTALLED_APPS`.\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:268
msgid ".. _creating-models:"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:270
#, no-wrap
msgid ""
"Creating models\n"
"===============\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:274
msgid ""
"Now that your environment -- a \"project\" -- is set up, you're set to start "
"doing work."
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:279
msgid ""
"Each application you write in Django consists of a Python package, somewhere "
"on your `Python path`_, that follows a certain convention. Django comes with "
"a utility that automatically generates the basic directory structure of an "
"app, so you can focus on writing code rather than creating directories."
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:281
msgid ".. admonition:: Projects vs. apps"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:287
#, no-wrap
msgid ""
"    What's the difference between a project and an app? An app is a Web\n"
"    application that does something -- e.g., a Weblog system, a database "
"of\n"
"    public records or a simple poll app. A project is a collection of\n"
"    configuration and apps for a particular Web site. A project can "
"contain\n"
"    multiple apps. An app can be in multiple projects.\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:290
msgid ""
"Your apps can live anywhere on your `Python path`_. In this tutorial, we'll "
"create our poll app in the :file:`mysite` directory for simplicity."
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:293
msgid ""
"To create your app, make sure you're in the :file:`mysite` directory and "
"type this command:"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:297
#, no-wrap
msgid "    python manage.py startapp polls\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:299
msgid "That'll create a directory :file:`polls`, which is laid out like this::"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:305
#, no-wrap
msgid ""
"    polls/\n"
"        __init__.py\n"
"        models.py\n"
"        tests.py\n"
"        views.py\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:307
msgid "This directory structure will house the poll application."
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:310
msgid ""
"The first step in writing a database Web app in Django is to define your "
"models -- essentially, your database layout, with additional metadata."
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:312 orig/tutorial01.txt:381
msgid ".. admonition:: Philosophy"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:317
#, no-wrap
msgid ""
"   A model is the single, definitive source of data about your data. It "
"contains\n"
"   the essential fields and behaviors of the data you're storing. Django "
"follows\n"
"   the :ref:`DRY Principle <dry>`. The goal is to define your data model in "
"one\n"
"   place and automatically derive things from it.\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:321
msgid ""
"In our simple poll app, we'll create two models: polls and choices. A poll "
"has a question and a publication date. A choice has two fields: the text of "
"the choice and a vote tally. Each choice is associated with a poll."
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:324
msgid ""
"These concepts are represented by simple Python classes. Edit the "
":file:`polls/models.py` file so it looks like this::"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:326
#, no-wrap
msgid "    from django.db import models\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:330
#, no-wrap
msgid ""
"    class Poll(models.Model):\n"
"        question = models.CharField(max_length=200)\n"
"        pub_date = models.DateTimeField('date published')\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:335
#, no-wrap
msgid ""
"    class Choice(models.Model):\n"
"        poll = models.ForeignKey(Poll)\n"
"        choice = models.CharField(max_length=200)\n"
"        votes = models.IntegerField()\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:339
msgid ""
"The code is straightforward. Each model is represented by a class that "
"subclasses :class:`django.db.models.Model`. Each model has a number of class "
"variables, each of which represents a database field in the model."
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:344
msgid ""
"Each field is represented by an instance of a "
":class:`~django.db.models.Field` class -- e.g., "
":class:`~django.db.models.CharField` for character fields and "
":class:`~django.db.models.DateTimeField` for datetimes. This tells Django "
"what type of data each field holds."
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:348
msgid ""
"The name of each :class:`~django.db.models.Field` instance "
"(e.g. ``question`` or ``pub_date`` ) is the field's name, in "
"machine-friendly format. You'll use this value in your Python code, and your "
"database will use it as the column name."
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:356
msgid ""
"You can use an optional first positional argument to a "
":class:`~django.db.models.Field` to designate a human-readable name. That's "
"used in a couple of introspective parts of Django, and it doubles as "
"documentation.  If this field isn't provided, Django will use the "
"machine-readable name. In this example, we've only defined a human-readable "
"name for ``Poll.pub_date``. For all other fields in this model, the field's "
"machine-readable name will suffice as its human-readable name."
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:361
msgid ""
"Some :class:`~django.db.models.Field` classes have required elements.  "
":class:`~django.db.models.CharField`, for example, requires that you give it "
"a :attr:`~django.db.models.Field.max_length`. That's used not only in the "
"database schema, but in validation, as we'll soon see."
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:366
msgid ""
"Finally, note a relationship is defined, using "
":class:`~django.db.models.ForeignKey`. That tells Django each Choice is "
"related to a single Poll. Django supports all the common database "
"relationships: many-to-ones, many-to-manys and one-to-ones."
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:368
msgid ""
".. _`Python path`: "
"http://docs.python.org/tutorial/modules.html#the-module-search-path"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:370
#, no-wrap
msgid ""
"Activating models\n"
"=================\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:374
msgid ""
"That small bit of model code gives Django a lot of information. With it, "
"Django is able to:"
msgstr ""

#. type: Bullet: '    * '
#: orig/tutorial01.txt:377
msgid "Create a database schema (``CREATE TABLE`` statements) for this app."
msgstr ""

#. type: Bullet: '    * '
#: orig/tutorial01.txt:377
msgid "Create a Python database-access API for accessing Poll and Choice objects."
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:379
msgid "But first we need to tell our project that the ``polls`` app is installed."
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:385
#, no-wrap
msgid ""
"    Django apps are \"pluggable\": You can use an app in multiple projects, "
"and\n"
"    you can distribute apps, because they don't have to be tied to a given\n"
"    Django installation.\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:389
msgid ""
"Edit the :file:`settings.py` file again, and change the "
":setting:`INSTALLED_APPS` setting to include the string ``'polls'``. So "
"it'll look like this::"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:397
#, no-wrap
msgid ""
"    INSTALLED_APPS = (\n"
"        'django.contrib.auth',\n"
"        'django.contrib.contenttypes',\n"
"        'django.contrib.sessions',\n"
"        'django.contrib.sites',\n"
"        'polls'\n"
"    )\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:400
msgid "Now Django knows to include the ``polls`` app. Let's run another command:"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:404
#, no-wrap
msgid "    python manage.py sql polls\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:407
msgid ""
"You should see something similar to the following (the ``CREATE TABLE`` SQL "
"statements for the polls app):"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:409
msgid ".. code-block:: sql"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:423
#, no-wrap
msgid ""
"    BEGIN;\n"
"    CREATE TABLE \"polls_poll\" (\n"
"        \"id\" serial NOT NULL PRIMARY KEY,\n"
"        \"question\" varchar(200) NOT NULL,\n"
"        \"pub_date\" timestamp with time zone NOT NULL\n"
"    );\n"
"    CREATE TABLE \"polls_choice\" (\n"
"        \"id\" serial NOT NULL PRIMARY KEY,\n"
"        \"poll_id\" integer NOT NULL REFERENCES \"polls_poll\" (\"id\"),\n"
"        \"choice\" varchar(200) NOT NULL,\n"
"        \"votes\" integer NOT NULL\n"
"    );\n"
"    COMMIT;\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:425
msgid "Note the following:"
msgstr ""

#. type: Bullet: '    * '
#: orig/tutorial01.txt:427
msgid "The exact output will vary depending on the database you are using."
msgstr ""

#. type: Bullet: '    * '
#: orig/tutorial01.txt:431
msgid ""
"Table names are automatically generated by combining the name of the app "
"(``polls``) and the lowercase name of the model -- ``poll`` and "
"``choice``. (You can override this behavior.)"
msgstr ""

#. type: Bullet: '    * '
#: orig/tutorial01.txt:433
msgid "Primary keys (IDs) are added automatically. (You can override this, too.)"
msgstr ""

#. type: Bullet: '    * '
#: orig/tutorial01.txt:436
msgid ""
"By convention, Django appends ``\"_id\"`` to the foreign key field name.  "
"Yes, you can override this, as well."
msgstr ""

#. type: Bullet: '    * '
#: orig/tutorial01.txt:439
msgid "The foreign key relationship is made explicit by a ``REFERENCES`` statement."
msgstr ""

#. type: Bullet: '    * '
#: orig/tutorial01.txt:446
msgid ""
"It's tailored to the database you're using, so database-specific field types "
"such as ``auto_increment`` (MySQL), ``serial`` (PostgreSQL), or ``integer "
"primary key`` (SQLite) are handled for you automatically. Same goes for "
"quoting of field names -- e.g., using double quotes or single quotes. The "
"author of this tutorial runs PostgreSQL, so the example output is in "
"PostgreSQL syntax."
msgstr ""

#. type: Bullet: '    * '
#: orig/tutorial01.txt:452
msgid ""
"The :djadmin:`sql` command doesn't actually run the SQL in your database - "
"it just prints it to the screen so that you can see what SQL Django thinks "
"is required. If you wanted to, you could copy and paste this SQL into your "
"database prompt. However, as we will see shortly, Django provides an easier "
"way of committing the SQL to the database."
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:454
msgid "If you're interested, also run the following commands:"
msgstr ""

#. type: Bullet: '    * '
#: orig/tutorial01.txt:457
msgid ""
":djadmin:`python manage.py validate <validate>` -- Checks for any errors in "
"the construction of your models."
msgstr ""

#. type: Bullet: '    * '
#: orig/tutorial01.txt:461
msgid ""
":djadmin:`python manage.py sqlcustom polls <sqlcustom>` -- Outputs any "
":ref:`custom SQL statements <initial-sql>` (such as table modifications or "
"constraints) that are defined for the application."
msgstr ""

#. type: Bullet: '    * '
#: orig/tutorial01.txt:465
msgid ""
":djadmin:`python manage.py sqlclear polls <sqlclear>` -- Outputs the "
"necessary ``DROP TABLE`` statements for this app, according to which tables "
"already exist in your database (if any)."
msgstr ""

#. type: Bullet: '    * '
#: orig/tutorial01.txt:468
msgid ""
":djadmin:`python manage.py sqlindexes polls <sqlindexes>` -- Outputs the "
"``CREATE INDEX`` statements for this app."
msgstr ""

#. type: Bullet: '    * '
#: orig/tutorial01.txt:472
msgid ""
":djadmin:`python manage.py sqlall polls <sqlall>` -- A combination of all "
"the SQL from the :djadmin:`sql`, :djadmin:`sqlcustom`, and "
":djadmin:`sqlindexes` commands."
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:475
msgid ""
"Looking at the output of those commands can help you understand what's "
"actually happening under the hood."
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:477
msgid ""
"Now, run :djadmin:`syncdb` again to create those model tables in your "
"database:"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:488
msgid ""
"The :djadmin:`syncdb` command runs the sql from 'sqlall' on your database "
"for all apps in :setting:`INSTALLED_APPS` that don't already exist in your "
"database.  This creates all the tables, initial data and indexes for any "
"apps you have added to your project since the last time you ran "
"syncdb. :djadmin:`syncdb` can be called as often as you like, and it will "
"only ever create the tables that don't exist."
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:491
msgid ""
"Read the :doc:`django-admin.py documentation </ref/django-admin>` for full "
"information on what the ``manage.py`` utility can do."
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:493
#, no-wrap
msgid ""
"Playing with the API\n"
"====================\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:497
msgid ""
"Now, let's hop into the interactive Python shell and play around with the "
"free API Django gives you. To invoke the Python shell, use this command:"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:501
#, no-wrap
msgid "    python manage.py shell\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:505
msgid ""
"We're using this instead of simply typing \"python\", because ``manage.py`` "
"sets up the project's environment for you. \"Setting up the environment\" "
"involves two things:"
msgstr ""

#. type: Bullet: '    * '
#: orig/tutorial01.txt:510
msgid ""
"Putting ``polls`` on ``sys.path``. For flexibility, several pieces of Django "
"refer to projects in Python dotted-path notation (e.g.  "
"``'polls.models'``). In order for this to work, the ``polls`` package has to "
"be on ``sys.path``."
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:513
#, no-wrap
msgid ""
"      We've already seen one example of this: the "
":setting:`INSTALLED_APPS`\n"
"      setting is a list of packages in dotted-path notation.\n"
msgstr ""

#. type: Bullet: '    * '
#: orig/tutorial01.txt:516
msgid ""
"Setting the ``DJANGO_SETTINGS_MODULE`` environment variable, which gives "
"Django the path to your ``settings.py`` file."
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:518
msgid ".. admonition:: Bypassing manage.py"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:523
#, no-wrap
msgid ""
"    If you'd rather not use ``manage.py``, no problem. Just make sure "
"``mysite``\n"
"    and ``polls`` are at the root level on the Python path (i.e., ``import "
"mysite``\n"
"    and ``import polls`` work) and set the ``DJANGO_SETTINGS_MODULE`` "
"environment\n"
"    variable to ``mysite.settings``.\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:526
#, no-wrap
msgid ""
"    For more information on all of this, see the :doc:`django-admin.py\n"
"    documentation </ref/django-admin>`.\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:528
msgid ""
"Once you're in the shell, explore the :doc:`database API "
"</topics/db/queries>`::"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:530
#, no-wrap
msgid ""
"    >>> from polls.models import Poll, Choice # Import the model classes we "
"just wrote.\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:534
#, no-wrap
msgid ""
"    # No polls are in the system yet.\n"
"    >>> Poll.objects.all()\n"
"    []\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:538
#, no-wrap
msgid ""
"    # Create a new Poll.\n"
"    >>> import datetime\n"
"    >>> p = Poll(question=\"What's up?\", "
"pub_date=datetime.datetime.now())\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:541
#, no-wrap
msgid ""
"    # Save the object into the database. You have to call save() "
"explicitly.\n"
"    >>> p.save()\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:548
#, no-wrap
msgid ""
"    # Now it has an ID. Note that this might say \"1L\" instead of \"1\", "
"depending\n"
"    # on which database you're using. That's no biggie; it just means your\n"
"    # database backend prefers to return integers as Python long integer\n"
"    # objects.\n"
"    >>> p.id\n"
"    1\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:554
#, no-wrap
msgid ""
"    # Access database columns via Python attributes.\n"
"    >>> p.question\n"
"    \"What's up?\"\n"
"    >>> p.pub_date\n"
"    datetime.datetime(2007, 7, 15, 12, 00, 53)\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:558
#, no-wrap
msgid ""
"    # Change values by changing the attributes, then calling save().\n"
"    >>> p.pub_date = datetime.datetime(2007, 4, 1, 0, 0)\n"
"    >>> p.save()\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:562
#, no-wrap
msgid ""
"    # objects.all() displays all the polls in the database.\n"
"    >>> Poll.objects.all()\n"
"    [<Poll: Poll object>]\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:569
msgid ""
"Wait a minute. ``<Poll: Poll object>`` is, utterly, an unhelpful "
"representation of this object. Let's fix that by editing the polls model (in "
"the ``polls/models.py`` file) and adding a "
":meth:`~django.db.models.Model.__unicode__` method to both ``Poll`` and "
"``Choice``::"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:574
#, no-wrap
msgid ""
"    class Poll(models.Model):\n"
"        # ...\n"
"        def __unicode__(self):\n"
"            return self.question\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:579
#, no-wrap
msgid ""
"    class Choice(models.Model):\n"
"        # ...\n"
"        def __unicode__(self):\n"
"            return self.choice\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:584
msgid ""
"It's important to add :meth:`~django.db.models.Model.__unicode__` methods to "
"your models, not only for your own sanity when dealing with the interactive "
"prompt, but also because objects' representations are used throughout "
"Django's automatically-generated admin."
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:587
#, no-wrap
msgid ""
".. admonition:: Why :meth:`~django.db.models.Model.__unicode__` and not\n"
"                :meth:`~django.db.models.Model.__str__`?\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:594
#, no-wrap
msgid ""
"    If you're familiar with Python, you might be in the habit of adding\n"
"    :meth:`~django.db.models.Model.__str__` methods to your classes, not\n"
"    :meth:`~django.db.models.Model.__unicode__` methods. We use\n"
"    :meth:`~django.db.models.Model.__unicode__` here because Django models "
"deal\n"
"    with Unicode by default. All data stored in your database is converted "
"to\n"
"    Unicode when it's returned.\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:600
#, no-wrap
msgid ""
"    Django models have a default :meth:`~django.db.models.Model.__str__` "
"method\n"
"    that calls :meth:`~django.db.models.Model.__unicode__` and converts "
"the\n"
"    result to a UTF-8 bytestring. This means that ``unicode(p)`` will return "
"a\n"
"    Unicode string, and ``str(p)`` will return a normal string, with "
"characters\n"
"    encoded as UTF-8.\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:604
#, no-wrap
msgid ""
"    If all of this is gibberish to you, just remember to add\n"
"    :meth:`~django.db.models.Model.__unicode__` methods to your models. With "
"any\n"
"    luck, things should Just Work for you.\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:607
msgid ""
"Note these are normal Python methods. Let's add a custom method, just for "
"demonstration::"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:614
#, no-wrap
msgid ""
"    import datetime\n"
"    # ...\n"
"    class Poll(models.Model):\n"
"        # ...\n"
"        def was_published_today(self):\n"
"            return self.pub_date.date() == datetime.date.today()\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:617
msgid ""
"Note the addition of ``import datetime`` to reference Python's standard "
"``datetime`` module."
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:620
msgid ""
"Save these changes and start a new Python interactive shell by running "
"``python manage.py shell`` again::"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:622
#, no-wrap
msgid "    >>> from polls.models import Poll, Choice\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:626
#, no-wrap
msgid ""
"    # Make sure our __unicode__() addition worked.\n"
"    >>> Poll.objects.all()\n"
"    [<Poll: What's up?>]\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:633
#, no-wrap
msgid ""
"    # Django provides a rich database lookup API that's entirely driven by\n"
"    # keyword arguments.\n"
"    >>> Poll.objects.filter(id=1)\n"
"    [<Poll: What's up?>]\n"
"    >>> Poll.objects.filter(question__startswith='What')\n"
"    [<Poll: What's up?>]\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:637
#, no-wrap
msgid ""
"    # Get the poll whose year is 2007.\n"
"    >>> Poll.objects.get(pub_date__year=2007)\n"
"    <Poll: What's up?>\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:642
#, no-wrap
msgid ""
"    >>> Poll.objects.get(id=2)\n"
"    Traceback (most recent call last):\n"
"        ...\n"
"    DoesNotExist: Poll matching query does not exist.\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:648
#, no-wrap
msgid ""
"    # Lookup by a primary key is the most common case, so Django provides "
"a\n"
"    # shortcut for primary-key exact lookups.\n"
"    # The following is identical to Poll.objects.get(id=1).\n"
"    >>> Poll.objects.get(pk=1)\n"
"    <Poll: What's up?>\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:653
#, no-wrap
msgid ""
"    # Make sure our custom method worked.\n"
"    >>> p = Poll.objects.get(pk=1)\n"
"    >>> p.was_published_today()\n"
"    False\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:660
#, no-wrap
msgid ""
"    # Give the Poll a couple of Choices. The create call constructs a new\n"
"    # choice object, does the INSERT statement, adds the choice to the set\n"
"    # of available choices and returns the new Choice object. Django "
"creates\n"
"    # a set to hold the \"other side\" of a ForeignKey relation\n"
"    # (e.g. a poll's choices) which can be accessed via the API.\n"
"    >>> p = Poll.objects.get(pk=1)\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:664
#, no-wrap
msgid ""
"    # Display any choices from the related object set -- none so far.\n"
"    >>> p.choice_set.all()\n"
"    []\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:671
#, no-wrap
msgid ""
"    # Create three choices.\n"
"    >>> p.choice_set.create(choice='Not much', votes=0)\n"
"    <Choice: Not much>\n"
"    >>> p.choice_set.create(choice='The sky', votes=0)\n"
"    <Choice: The sky>\n"
"    >>> c = p.choice_set.create(choice='Just hacking again', votes=0)\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:675
#, no-wrap
msgid ""
"    # Choice objects have API access to their related Poll objects.\n"
"    >>> c.poll\n"
"    <Poll: What's up?>\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:681
#, no-wrap
msgid ""
"    # And vice versa: Poll objects get access to Choice objects.\n"
"    >>> p.choice_set.all()\n"
"    [<Choice: Not much>, <Choice: The sky>, <Choice: Just hacking again>]\n"
"    >>> p.choice_set.count()\n"
"    3\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:688
#, no-wrap
msgid ""
"    # The API automatically follows relationships as far as you need.\n"
"    # Use double underscores to separate relationships.\n"
"    # This works as many levels deep as you want; there's no limit.\n"
"    # Find all Choices for any poll whose pub_date is in 2007.\n"
"    >>> Choice.objects.filter(poll__pub_date__year=2007)\n"
"    [<Choice: Not much>, <Choice: The sky>, <Choice: Just hacking again>]\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:692
#, no-wrap
msgid ""
"    # Let's delete one of the choices. Use delete() for that.\n"
"    >>> c = p.choice_set.filter(choice__startswith='Just hacking')\n"
"    >>> c.delete()\n"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:697
msgid ""
"For more information on model relations, see :doc:`Accessing related objects "
"</ref/models/relations>`. For more on how to use double underscores to "
"perform field lookups via the API, see `Field lookups`__. For full details "
"on the database API, see our :doc:`Database API reference "
"</topics/db/queries>`."
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:699
msgid "__ http://docs.djangoproject.com/en/1.2/topics/db/queries/#field-lookups"
msgstr ""

#. type: Plain text
#: orig/tutorial01.txt:701
msgid ""
"When you're comfortable with the API, read :doc:`part 2 of this tutorial "
"</intro/tutorial02>` to get Django's automatic admin working."
msgstr ""
