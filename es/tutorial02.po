# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# root <juanf.jaramillo@opdevel.com>, 2012.
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2012-03-26 23:31-0500\n"
"PO-Revision-Date: 2012-03-28 11:00-0500\n"
"Last-Translator: root <juanf.jaramillo@opdevel.com>\n"
"Language-Team: slec's translation team\n"
"Language: es\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Generator: Virtaal 0.7.1\n"

#. type: Plain text
#: orig/tutorial02.txt:1
#, no-wrap
msgid "=====================================\n"
msgstr "=====================================\n"

#. type: Plain text
#: orig/tutorial02.txt:3
#, no-wrap
msgid ""
"Writing your first Django app, part 2\n"
"=====================================\n"
msgstr ""
"Escribir su primera aplicación de Django, parte 2\n"
"=================================================\n"

#. type: Plain text
#: orig/tutorial02.txt:8
msgid ""
"This tutorial begins where :doc:`Tutorial 1 </intro/tutorial01>` left off. "
"We're continuing the Web-poll application and will focus on Django's "
"automatically-generated admin site."
msgstr ""
"Este tutorial comienza en donde :doc:`Tutorial 1 </intro/tutorial01>` "
"terminó. Continuaremos con la aplicación Web-poll y nos enfocaremos en el "
"sitio administrativo auto generado de Django."

#. type: Plain text
#: orig/tutorial02.txt:10
msgid ".. admonition:: Philosophy"
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:14
#, no-wrap
msgid ""
"    Generating admin sites for your staff or clients to add, change and delete\n"
"    content is tedious work that doesn't require much creativity. For that\n"
"    reason, Django entirely automates creation of admin interfaces for models.\n"
msgstr ""
"    Generar sitios administrativos para su equipo o clientes para adicionar,\n"
"    cambiar y borrar contenido es un trabajo tedioso que no requiere\n"
"    creatividad. Por tal razón, Django automatiza totalmente la creación de\n"
"    interfaces de administración para los modelos.\n"

#. type: Plain text
#: orig/tutorial02.txt:20
#, no-wrap
msgid ""
"    Django was written in a newsroom environment, with a very clear separation\n"
"    between \"content publishers\" and the \"public\" site. Site managers use the\n"
"    system to add news stories, events, sports scores, etc., and that content is\n"
"    displayed on the public site. Django solves the problem of creating a\n"
"    unified interface for site administrators to edit content.\n"
msgstr ""
"    Django fue escrito en un ambiente de una sala de prensa, con una muy "
"clara\n"
"    separación entre \"contenido editorial\" y el sitio \"publico\". Los\n"
"    administradores del sito usan el sistema para adicionar nuevos relatos,\n"
"    eventos, resultados deportivos, etc., y el contenido es mostrado en el "
"sitio\n"
"    público. Django resuelve el problema de crear una interface unificada "
"para\n"
"    que el administrador del sitio edite el contenido.\n"

#. type: Plain text
#: orig/tutorial02.txt:23
#, no-wrap
#| msgid ""
#| "    The admin isn't necessarily intended to be used by site visitors; it's for\n"
#| "    site managers.\n"
msgid ""
"    The admin isn't intended to be used by site visitors. It's for site\n"
"    managers.\n"
msgstr ""
"    El objetivo del administrador no es para ser usado por visitantes. Es "
"para\n"
"    administrar el sitio.\n"

#. type: Plain text
#: orig/tutorial02.txt:25
#, no-wrap
msgid ""
"Activate the admin site\n"
"=======================\n"
msgstr ""
"Activar el sitio administrativo\n"
"===============================\n"

#. type: Plain text
#: orig/tutorial02.txt:29
msgid ""
"The Django admin site is not activated by default -- it's an opt-in thing. "
"To activate the admin site for your installation, do these three things:"
msgstr ""
"El sitio administrativo de Django no está activado por defecto -- esto es un "
"opt-in. Para activar el sitio administrador en su instalación, haga estas "
"tres cosas:"

#. type: Bullet: '* '
#: orig/tutorial02.txt:31
#| msgid ""
#| "Add ``\"django.contrib.admin\"`` to your :setting:`INSTALLED_APPS` "
#| "setting."
msgid ""
"Uncomment ``\"django.contrib.admin\"`` in the :setting:`INSTALLED_APPS` "
"setting."
msgstr ""
"Des comente ``\"django.contrib.admin\"`` en :setting:`INSTALLED_APPS` "
"configuración."

#. type: Bullet: '* '
#: orig/tutorial02.txt:34
msgid ""
"Run ``python manage.py syncdb``. Since you have added a new application to :"
"setting:`INSTALLED_APPS`, the database tables need to be updated."
msgstr ""
"Ejecute ``python manage.py syncdb``. Ya que ha adicionado una nueva "
"aplicación a :setting:`INSTALLED_APPS`, las tablas de al base de datos "
"necesitan ser actualizadas."

#. type: Bullet: '* '
#: orig/tutorial02.txt:40
msgid ""
"Edit your ``mysite/urls.py`` file and uncomment the lines that reference the "
"admin -- there are three lines in total to uncomment. This file is a "
"URLconf; we'll dig into URLconfs in the next tutorial. For now, all you need "
"to know is that it maps URL roots to applications. In the end, you should "
"have a ``urls.py`` file that looks like this:"
msgstr ""
"Edite el archivo ``mysite/urls.py`` y remueva los comentarios de las líneas "
"que se refieren al admin -- hay tres líneas en total. Este archivo es un "
"URLconf; profundizaremos en URLconfs en el siguiente tutorial. Por ahora, "
"todo lo que necesita saber es que hay mapas de raíces de URL para "
"aplicaciones. Al final, deberá tener un archivo ``urls.py`` que luce como "
"esto:"

#. type: Plain text
#: orig/tutorial02.txt:42
#, no-wrap
msgid "  .. parsed-literal::\n"
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:44
#, no-wrap
msgid "      from django.conf.urls import patterns, include, url\n"
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:48
#, no-wrap
msgid ""
"      # Uncomment the next two lines to enable the admin:\n"
"      **from django.contrib import admin**\n"
"      **admin.autodiscover()**\n"
msgstr ""
"      # Des-comente las siguientes dos líneas para habilitar el "
"administrativo:\n"
"      **from django.contrib import admin**\n"
"      **admin.autodiscover()**\n"

#. type: Plain text
#: orig/tutorial02.txt:53
#, no-wrap
msgid ""
"      urlpatterns = patterns('',\n"
"          # Examples:\n"
"          # url(r'^$', '{{ project_name }}.views.home', name='home'),\n"
"          # url(r'^{{ project_name }}/', include('{{ project_name }}.foo.urls')),\n"
msgstr ""
"      urlpatterns = patterns('',\n"
"          # Ejemplos:\n"
"          # url(r'^$', '{{ project_name }}.views.home', name='home'),\n"
"          # url(r'^{{ project_name }}/', include('{{ project_name "
"}}.foo.urls')),\n"

#. type: Plain text
#: orig/tutorial02.txt:56
#, no-wrap
msgid ""
"          # Uncomment the admin/doc line below to enable admin documentation:\n"
"          # url(r'^admin/doc/', include('django.contrib.admindocs.urls')),\n"
msgstr ""
"          # Des comente la línea del adminsitrativo/document abajo para "
"habilitar\n"
"          # la documentación del administrativo:\n"
"          # url(r'^admin/doc/', include('django.contrib.admindocs.urls')),\n"

#. type: Plain text
#: orig/tutorial02.txt:60
#, no-wrap
msgid ""
"          # Uncomment the next line to enable the admin:\n"
"          **url(r'^admin/', include(admin.site.urls)),**\n"
"      )\n"
msgstr ""
"          # Des comente la siguiente línea para habilitar el administrativo:\n"
"          **url(r'^admin/', include(admin.site.urls)),**\n"
"      )"

#. type: Plain text
#: orig/tutorial02.txt:62
#, no-wrap
#| msgid "      (The bold lines are the ones that needed to be uncommented.)\n"
msgid "  (The bold lines are the ones that needed to be uncommented.)\n"
msgstr "  (Las líneas resaltadas son las que se necesita que no estén comentadas.)\n"

#. type: Plain text
#: orig/tutorial02.txt:64
#, no-wrap
msgid ""
"Start the development server\n"
"============================\n"
msgstr ""
"Comenzar el servidor de desarrollo\n"
"==================================\n"

#. type: Plain text
#: orig/tutorial02.txt:67
msgid "Let's start the development server and explore the admin site."
msgstr ""
"Comencemos el servidor de desarrollo y exploremos el sitio administrativo. "

#. type: Plain text
#: orig/tutorial02.txt:69
msgid "Recall from Tutorial 1 that you start the development server like so:"
msgstr ""
"Recuerde del Turorial 1 que usted comenzó el servidor de desarrollo de la "
"siguiente forma:"

#. type: Plain text
#: orig/tutorial02.txt:71
msgid ".. code-block:: bash"
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:73
#, no-wrap
msgid "    python manage.py runserver\n"
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:76
msgid ""
"Now, open a Web browser and go to \"/admin/\" on your local domain -- e.g., "
"http://127.0.0.1:8000/admin/. You should see the admin's login screen:"
msgstr ""
"Ahora, abra un browser y vaya a \"/admin/\" en su dominio local -- v.gr., "
"http://127.0.0.1:8000/admin/. Verá la pantalla de inicio de sesión del "
"administrador:"

#. type: Plain text
#: orig/tutorial02.txt:79
#, no-wrap
msgid ""
".. image:: _images/admin01.png\n"
"   :alt: Django admin login screen\n"
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:81
msgid ".. admonition:: Doesn't match what you see?"
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:84
#, no-wrap
msgid ""
"    If at this point, instead of the above login page, you get an error\n"
"    page reporting something like::\n"
msgstr ""
"    Si en este punto, en lugar de la página de login, obtiene una de error\n"
"    que reporta algo como::\n"

#. type: Plain text
#: orig/tutorial02.txt:88
#, no-wrap
msgid ""
"        ImportError at /admin/\n"
"        cannot import name patterns\n"
"        ...\n"
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:92
#, no-wrap
msgid ""
"    then you're probably using a version of Django that doesn't match this\n"
"    tutorial version. You'll want to either switch to the older tutorial or the\n"
"    newer Django version.\n"
msgstr ""
"    entonces probablemente este usando una versión de Django que no "
"corresponde\n"
"    a la del tutorial. Entonces puede hacer una de dos, o cambiar a una "
"versión\n"
"    más antigua o a una de Django más nueva.\n"

#. type: Plain text
#: orig/tutorial02.txt:94
#, no-wrap
msgid ""
"Enter the admin site\n"
"====================\n"
msgstr ""
"Ingresar al sitio administrativo\n"
"================================\n"

#. type: Plain text
#: orig/tutorial02.txt:100
msgid ""
"Now, try logging in. (You created a superuser account in the first part of "
"this tutorial, remember? If you didn't create one or forgot the password you "
"can :ref:`create another one <topics-auth-creating-superusers>`.) You should "
"see the Django admin index page:"
msgstr ""
"Ahora, trate de iniciar sesión. (Usted creó una cuenta de super usuario en "
"la primera parte de este tutorial, ¿lo recuerda? Si no la ha creado o ha "
"olvidado la contraseña, podrá :ref:`create another one <topics-auth-creating-"
"superusers>`.) Deberá mirar la página de Administrador de Django."

#. type: Plain text
#: orig/tutorial02.txt:103
#, no-wrap
msgid ""
".. image:: _images/admin02t.png\n"
"   :alt: Django admin index page\n"
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:106
#| msgid ""
#| "You should see a few other types of editable content, including groups, "
#| "users and sites. These are core features Django ships with by default."
msgid ""
"You should see a few types of editable content, including groups, users and "
"sites. These are core features Django ships with by default."
msgstr ""
"Deberá ver algunos tipos de edición de contenido, incluyendo grupos, "
"usuarios y sitios. Este es el núcleo de los rasgos de Django por defecto."

#. type: Plain text
#: orig/tutorial02.txt:108
#, no-wrap
msgid ""
"Make the poll app modifiable in the admin\n"
"=========================================\n"
msgstr ""
"Hacer la aplicación de sondeo modificable en el administrativo\n"
"==============================================================\n"

#. type: Plain text
#: orig/tutorial02.txt:111
msgid "But where's our poll app? It's not displayed on the admin index page."
msgstr ""
"Pero ¿dónde está nuestra aplicación de sondeo? Esta no se despliega en el la "
"página del índice del administrativo."

#. type: Plain text
#: orig/tutorial02.txt:115
msgid ""
"Just one thing to do: We need to tell the admin that ``Poll`` objects have "
"an admin interface. To do this, create a file called ``admin.py`` in your "
"``polls`` directory, and edit it to look like this::"
msgstr ""
"Solo hay que hacer una cosa: necesitamos decirle al administrativo que el "
"objeto ``Poll`` tiene una interfase administrativa. Para hacer esto, cree un "
"archivo llamado `admin.py` en su directorio ``polls``, y edítelo para que "
"luzca como esto::"

#. type: Plain text
#: orig/tutorial02.txt:118
#, no-wrap
msgid ""
"    from polls.models import Poll\n"
"    from django.contrib import admin\n"
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:120
#, no-wrap
msgid "    admin.site.register(Poll)\n"
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:124
msgid ""
"You'll need to restart the development server to see your changes. Normally, "
"the server auto-reloads code every time you modify a file, but the action of "
"creating a new file doesn't trigger the auto-reloading logic."
msgstr ""
"Necesitará reiniciar el servidor de desarrollo para ver los cambios. "
"Normalmente, el servidor automáticamente recarga el código cada vez que "
"modifica un archivo, pero la acción de crear un nuevo archivo no provoca la "
"lógica de auto recarga."

#. type: Plain text
#: orig/tutorial02.txt:126
#, no-wrap
msgid ""
"Explore the free admin functionality\n"
"====================================\n"
msgstr ""
"Explorar la funcionalidad libre del administrativo\n"
"==================================================\n"

#. type: Plain text
#: orig/tutorial02.txt:130
msgid ""
"Now that we've registered ``Poll``, Django knows that it should be displayed "
"on the admin index page:"
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:133
#, no-wrap
msgid ""
".. image:: _images/admin03t.png\n"
"   :alt: Django admin index page, now with polls displayed\n"
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:137
msgid ""
"Click \"Polls.\" Now you're at the \"change list\" page for polls. This page "
"displays all the polls in the database and lets you choose one to change "
"it.  There's the \"What's up?\" poll we created in the first tutorial:"
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:140 orig/tutorial02.txt:335
#, no-wrap
msgid ""
".. image:: _images/admin04t.png\n"
"   :alt: Polls change list page\n"
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:142
msgid "Click the \"What's up?\" poll to edit it:"
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:145
#, no-wrap
msgid ""
".. image:: _images/admin05t.png\n"
"   :alt: Editing form for poll object\n"
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:147
msgid "Things to note here:"
msgstr ""

#. type: Bullet: '* '
#: orig/tutorial02.txt:149
msgid "The form is automatically generated from the Poll model."
msgstr ""

#. type: Bullet: '* '
#: orig/tutorial02.txt:154
msgid ""
"The different model field types (:class:`~django.db.models.DateTimeField`, :"
"class:`~django.db.models.CharField`) correspond to the appropriate HTML "
"input widget. Each type of field knows how to display itself in the Django "
"admin."
msgstr ""

#. type: Bullet: '* '
#: orig/tutorial02.txt:158
msgid ""
"Each :class:`~django.db.models.DateTimeField` gets free JavaScript "
"shortcuts. Dates get a \"Today\" shortcut and calendar popup, and times get "
"a \"Now\" shortcut and a convenient popup that lists commonly entered times."
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:160
msgid "The bottom part of the page gives you a couple of options:"
msgstr ""

#. type: Bullet: '* '
#: orig/tutorial02.txt:163
msgid ""
"Save -- Saves changes and returns to the change-list page for this type of "
"object."
msgstr ""

#. type: Bullet: '* '
#: orig/tutorial02.txt:166
msgid ""
"Save and continue editing -- Saves changes and reloads the admin page for "
"this object."
msgstr ""

#. type: Bullet: '* '
#: orig/tutorial02.txt:169
msgid ""
"Save and add another -- Saves changes and loads a new, blank form for this "
"type of object."
msgstr ""

#. type: Bullet: '* '
#: orig/tutorial02.txt:171
msgid "Delete -- Displays a delete confirmation page."
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:176
msgid ""
"If the value of \"Date published\" doesn't match the time when you created "
"the poll in Tutorial 1, it probably means you forgot to set the correct "
"value for the :setting:`TIME_ZONE` setting. Change it, reload the page and "
"check that the correct value appears."
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:181
msgid ""
"Change the \"Date published\" by clicking the \"Today\" and \"Now\" "
"shortcuts. Then click \"Save and continue editing.\" Then click \"History\" "
"in the upper right.  You'll see a page listing all changes made to this "
"object via the Django admin, with the timestamp and username of the person "
"who made the change:"
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:184
#, no-wrap
msgid ""
".. image:: _images/admin06t.png\n"
"   :alt: History page for poll object\n"
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:186
#, no-wrap
msgid ""
"Customize the admin form\n"
"========================\n"
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:193
msgid ""
"Take a few minutes to marvel at all the code you didn't have to write. By "
"registering the Poll model with ``admin.site.register(Poll)``, Django was "
"able to construct a default form representation. Often, you'll want to "
"customize how the admin form looks and works. You'll do this by telling "
"Django the options you want when you register the object."
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:196
msgid ""
"Let's see how this works by re-ordering the fields on the edit form. Replace "
"the ``admin.site.register(Poll)`` line with::"
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:199
#, no-wrap
msgid ""
"    class PollAdmin(admin.ModelAdmin):\n"
"        fields = ['pub_date', 'question']\n"
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:201 orig/tutorial02.txt:225 orig/tutorial02.txt:298
#, no-wrap
msgid "    admin.site.register(Poll, PollAdmin)\n"
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:205
msgid ""
"You'll follow this pattern -- create a model admin object, then pass it as "
"the second argument to ``admin.site.register()`` -- any time you need to "
"change the admin options for an object."
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:208
msgid ""
"This particular change above makes the \"Publication date\" come before the "
"\"Question\" field:"
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:211
#, no-wrap
msgid ""
".. image:: _images/admin07.png\n"
"   :alt: Fields have been reordered\n"
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:214
msgid ""
"This isn't impressive with only two fields, but for admin forms with dozens "
"of fields, choosing an intuitive order is an important usability detail."
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:217
msgid ""
"And speaking of forms with dozens of fields, you might want to split the "
"form up into fieldsets::"
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:223
#, no-wrap
msgid ""
"    class PollAdmin(admin.ModelAdmin):\n"
"        fieldsets = [\n"
"            (None,               {'fields': ['question']}),\n"
"            ('Date information', {'fields': ['pub_date']}),\n"
"        ]\n"
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:228
msgid ""
"The first element of each tuple in ``fieldsets`` is the title of the "
"fieldset.  Here's what our form looks like now:"
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:231
#, no-wrap
msgid ""
".. image:: _images/admin08t.png\n"
"   :alt: Form has fieldsets now\n"
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:236
msgid ""
"You can assign arbitrary HTML classes to each fieldset. Django provides a ``"
"\"collapse\"`` class that displays a particular fieldset initially "
"collapsed.  This is useful when you have a long form that contains a number "
"of fields that aren't commonly used::"
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:242
#, no-wrap
msgid ""
"        class PollAdmin(admin.ModelAdmin):\n"
"            fieldsets = [\n"
"                (None,               {'fields': ['question']}),\n"
"                ('Date information', {'fields': ['pub_date'], 'classes': ['collapse']}),\n"
"            ]\n"
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:245
#, no-wrap
msgid ""
".. image:: _images/admin09.png\n"
"   :alt: Fieldset is initially collapsed\n"
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:247
#, no-wrap
msgid ""
"Adding related objects\n"
"======================\n"
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:251
msgid ""
"OK, we have our Poll admin page. But a ``Poll`` has multiple ``Choices``, "
"and the admin page doesn't display choices."
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:253
msgid "Yet."
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:256
msgid ""
"There are two ways to solve this problem. The first is to register "
"``Choice`` with the admin just as we did with ``Poll``. That's easy::"
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:258
#, no-wrap
msgid "    from polls.models import Choice\n"
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:260
#, no-wrap
msgid "    admin.site.register(Choice)\n"
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:263
msgid ""
"Now \"Choices\" is an available option in the Django admin. The \"Add choice"
"\" form looks like this:"
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:266
#, no-wrap
msgid ""
".. image:: _images/admin10.png\n"
"   :alt: Choice admin page\n"
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:271
msgid ""
"In that form, the \"Poll\" field is a select box containing every poll in "
"the database. Django knows that a :class:`~django.db.models.ForeignKey` "
"should be represented in the admin as a ``<select>`` box. In our case, only "
"one poll exists at this point."
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:278
msgid ""
"Also note the \"Add Another\" link next to \"Poll.\" Every object with a "
"``ForeignKey`` relationship to another gets this for free. When you click "
"\"Add Another,\" you'll get a popup window with the \"Add poll\" form. If "
"you add a poll in that window and click \"Save,\" Django will save the poll "
"to the database and dynamically add it as the selected choice on the \"Add "
"choice\" form you're looking at."
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:282
msgid ""
"But, really, this is an inefficient way of adding Choice objects to the "
"system.  It'd be better if you could add a bunch of Choices directly when "
"you create the Poll object. Let's make that happen."
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:285
msgid ""
"Remove the ``register()`` call for the Choice model. Then, edit the ``Poll`` "
"registration code to read::"
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:289
#, no-wrap
msgid ""
"    class ChoiceInline(admin.StackedInline):\n"
"        model = Choice\n"
"        extra = 3\n"
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:296
#, no-wrap
msgid ""
"    class PollAdmin(admin.ModelAdmin):\n"
"        fieldsets = [\n"
"            (None,               {'fields': ['question']}),\n"
"            ('Date information', {'fields': ['pub_date'], 'classes': ['collapse']}),\n"
"        ]\n"
"        inlines = [ChoiceInline]\n"
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:301
msgid ""
"This tells Django: \"Choice objects are edited on the Poll admin page. By "
"default, provide enough fields for 3 choices.\""
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:303
msgid ""
"Load the \"Add poll\" page to see how that looks, you may need to restart "
"your development server:"
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:306
#, no-wrap
msgid ""
".. image:: _images/admin11t.png\n"
"   :alt: Add poll page now has choices on it\n"
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:310
msgid ""
"It works like this: There are three slots for related Choices -- as "
"specified by ``extra`` -- and each time you come back to the \"Change\" page "
"for an already-created object, you get another three extra slots."
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:315
msgid ""
"One small problem, though. It takes a lot of screen space to display all the "
"fields for entering related Choice objects. For that reason, Django offers a "
"tabular way of displaying inline related objects; you just need to change "
"the ``ChoiceInline`` declaration to read::"
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:318
#, no-wrap
msgid ""
"    class ChoiceInline(admin.TabularInline):\n"
"        #...\n"
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:321
msgid ""
"With that ``TabularInline`` (instead of ``StackedInline``), the related "
"objects are displayed in a more compact, table-based format:"
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:324
#, no-wrap
msgid ""
".. image:: _images/admin12.png\n"
"   :alt: Add poll page now has more compact choices\n"
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:326
#, no-wrap
msgid ""
"Customize the admin change list\n"
"===============================\n"
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:330
msgid ""
"Now that the Poll admin page is looking good, let's make some tweaks to the "
"\"change list\" page -- the one that displays all the polls in the system."
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:332
msgid "Here's what it looks like at this point:"
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:340
msgid ""
"By default, Django displays the ``str()`` of each object. But sometimes it'd "
"be more helpful if we could display individual fields. To do that, use the "
"``list_display`` admin option, which is a tuple of field names to display, "
"as columns, on the change list page for the object::"
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:344
#, no-wrap
msgid ""
"    class PollAdmin(admin.ModelAdmin):\n"
"        # ...\n"
"        list_display = ('question', 'pub_date')\n"
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:347
msgid ""
"Just for good measure, let's also include the ``was_published_recently`` "
"custom method from Tutorial 1::"
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:351
#, no-wrap
msgid ""
"    class PollAdmin(admin.ModelAdmin):\n"
"        # ...\n"
"        list_display = ('question', 'pub_date', 'was_published_recently')\n"
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:353
msgid "Now the poll change list page looks like this:"
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:356
#, no-wrap
msgid ""
".. image:: _images/admin13t.png\n"
"   :alt: Polls change list page, updated\n"
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:363
msgid ""
"You can click on the column headers to sort by those values -- except in the "
"case of the ``was_published_recently`` header, because sorting by the output "
"of an arbitrary method is not supported. Also note that the column header "
"for ``was_published_recently`` is, by default, the name of the method (with "
"underscores replaced with spaces), and that each line contains the string "
"representation of the output."
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:366
msgid ""
"You can improve that by giving that method (in ``models.py``) a few "
"attributes, as follows::"
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:374
#, no-wrap
msgid ""
"    class Poll(models.Model):\n"
"        # ...\n"
"        def was_published_recently(self):\n"
"            return self.pub_date >= timezone.now() - datetime.timedelta(days=1)\n"
"        was_published_recently.admin_order_field = 'pub_date'\n"
"        was_published_recently.boolean = True\n"
"        was_published_recently.short_description = 'Published recently?'\n"
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:377
msgid ""
"Edit your admin.py file again and add an improvement to the Poll change list "
"page: Filters. Add the following line to ``PollAdmin``::"
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:379
#, no-wrap
msgid "    list_filter = ['pub_date']\n"
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:382
msgid ""
"That adds a \"Filter\" sidebar that lets people filter the change list by "
"the ``pub_date`` field:"
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:385
#, no-wrap
msgid ""
".. image:: _images/admin14t.png\n"
"   :alt: Polls change list page, updated\n"
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:390
msgid ""
"The type of filter displayed depends on the type of field you're filtering "
"on.  Because ``pub_date`` is a :class:`~django.db.models.fields."
"DateTimeField`, Django knows to give appropriate filter options: \"Any date,"
"\" \"Today,\" \"Past 7 days,\" \"This month,\" \"This year.\""
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:392
msgid "This is shaping up well. Let's add some search capability::"
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:394
#, no-wrap
msgid "    search_fields = ['question']\n"
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:399
msgid ""
"That adds a search box at the top of the change list. When somebody enters "
"search terms, Django will search the ``question`` field. You can use as many "
"fields as you'd like -- although because it uses a ``LIKE`` query behind the "
"scenes, keep it reasonable, to keep your database happy."
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:402
msgid ""
"Finally, because Poll objects have dates, it'd be convenient to be able to "
"drill down by date. Add this line::"
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:404
#, no-wrap
msgid "    date_hierarchy = 'pub_date'\n"
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:408
msgid ""
"That adds hierarchical navigation, by date, to the top of the change list "
"page.  At top level, it displays all available years. Then it drills down to "
"months and, ultimately, days."
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:413
msgid ""
"Now's also a good time to note that change lists give you free pagination. "
"The default is to display 100 items per page. Change-list pagination, search "
"boxes, filters, date-hierarchies and column-header-ordering all work "
"together like you think they should."
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:415
#, no-wrap
msgid ""
"Customize the admin look and feel\n"
"=================================\n"
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:419
msgid ""
"Clearly, having \"Django administration\" at the top of each admin page is "
"ridiculous. It's just placeholder text."
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:423
msgid ""
"That's easy to change, though, using Django's template system. The Django "
"admin is powered by Django itself, and its interfaces use Django's own "
"template system."
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:428
msgid ""
"Open your settings file (``mysite/settings.py``, remember) and look at the :"
"setting:`TEMPLATE_DIRS` setting. :setting:`TEMPLATE_DIRS` is a tuple of "
"filesystem directories to check when loading Django templates. It's a search "
"path."
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:431
msgid ""
"By default, :setting:`TEMPLATE_DIRS` is empty. So, let's add a line to it, "
"to tell Django where our templates live::"
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:435
#, no-wrap
msgid ""
"    TEMPLATE_DIRS = (\n"
"        '/home/my_username/mytemplates', # Change this to your own directory.\n"
"    )\n"
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:444
msgid ""
"Now copy the template ``admin/base_site.html`` from within the default "
"Django admin template directory in the source code of Django itself "
"(``django/contrib/admin/templates``) into an ``admin`` subdirectory of "
"whichever directory you're using in :setting:`TEMPLATE_DIRS`. For example, "
"if your :setting:`TEMPLATE_DIRS` includes ``'/home/my_username/"
"mytemplates'``, as above, then copy ``django/contrib/admin/templates/admin/"
"base_site.html`` to ``/home/my_username/mytemplates/admin/base_site.html``. "
"Don't forget that ``admin`` subdirectory."
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:447
msgid ""
"Then, just edit the file and replace the generic Django text with your own "
"site's name as you see fit."
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:454
msgid ""
"This template file contains lots of text like ``{% block branding %}`` and ``"
"{{ title }}``. The ``{%`` and ``{{`` tags are part of Django's template "
"language. When Django renders ``admin/base_site.html``, this template "
"language will be evaluated to produce the final HTML page.  Don't worry if "
"you can't make any sense of the template right now -- we'll delve into "
"Django's templating language in Tutorial 3."
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:459
msgid ""
"Note that any of Django's default admin templates can be overridden. To "
"override a template, just do the same thing you did with ``base_site.html`` "
"-- copy it from the default directory into your custom directory, and make "
"changes."
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:465
msgid ""
"Astute readers will ask: But if :setting:`TEMPLATE_DIRS` was empty by "
"default, how was Django finding the default admin templates? The answer is "
"that, by default, Django automatically looks for a ``templates/`` "
"subdirectory within each app package, for use as a fallback. See the :ref:"
"`template loader documentation <template-loaders>` for full information."
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:467
#, no-wrap
msgid ""
"Customize the admin index page\n"
"==============================\n"
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:471
msgid ""
"On a similar note, you might want to customize the look and feel of the "
"Django admin index page."
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:476
msgid ""
"By default, it displays all the apps in :setting:`INSTALLED_APPS` that have "
"been registered with the admin application, in alphabetical order. You may "
"want to make significant changes to the layout. After all, the index is "
"probably the most important page of the admin, and it should be easy to use."
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:485
msgid ""
"The template to customize is ``admin/index.html``. (Do the same as with "
"``admin/base_site.html`` in the previous section -- copy it from the default "
"directory to your custom template directory.) Edit the file, and you'll see "
"it uses a template variable called ``app_list``. That variable contains "
"every installed Django app. Instead of using that, you can hard-code links "
"to object-specific admin pages in whatever way you think is best. Again, "
"don't worry if you can't understand the template language -- we'll cover "
"that in more detail in Tutorial 3."
msgstr ""

#. type: Plain text
#: orig/tutorial02.txt:487
msgid ""
"When you're comfortable with the admin site, read :doc:`part 3 of this "
"tutorial </intro/tutorial03>` to start working on public poll views."
msgstr ""
